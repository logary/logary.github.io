{
    "docs": [
        {
            "location": "/", 
            "text": "Logary\n\n\nLogary is a high performance, multi-target logging, metric, tracing and\nhealth-check library for mono and .Net.\n\n\nFollow Logary at twitter: \n@logarylib\n\n\nChat and support and get support:\n\n\n\nIf you like the code, buy me a beer!\n\n\nLogary v4.0 aims to be compatible with the latest Mono and .Net 4.0. It is\ncompiled with open source F# 4.0. \nLogary is continously built on\nCentOS\n.\n\n\nInstall-Package Logary\n\n\n\n\nWhy?\n\n\nLogary is the next generation logging framework. It observes some facts that it\nsuccessfully builds its conceptual model from! It's written using functional\nprogramming in F# with only a single field 'global state' to facilitate logging\nwith initialise-once static readonly fields. It never throws runtime exceptions\nif the configuration validates and never blocks the call-site.\n\n\nWhat now?\n\n\nHave a look at the \noverview of the targets\n, to get an\nidea about what you can log to! You can read up on the \nthinking behind\nlogary\n. You can also \nwatch a presentation in\nSwedish\n\nabout how\nbusiness should log semantically and not just dump it all into a text file!\n\n\nRelease Notes\n\n\nv4.0\n\n\n\n\nStill Alpha...\n\n\n\n\nv3.0\n\n\n\n\nImproved naming; 'Logary.Suave' -\n 'Logary.Adapters.Suave' -- makes it easier\n   to find what you're after now that we have many adapters and targets.\n\n\nMoved some adapter types around (see Obsoletes) and made all adapters have\n   the same naming standard.\n\n\n\n\nv2.6\n\n\n\n\nFixed a filtering bug that meant you'd get more logs sent to your Targets\n   than you wanted.\n\n\n\n\nv2.1\n\n\n\n\nFSharp.Core.3 -\n FSharp.Core\n\n\nBumped all nuget versions to latest\n\n\n\n\nv2.0.2\n\n\n\n\nSupport CommonLogging fully\n\n\nNew \nLogary.Adapters.EventStore\n\n\nNew function \nLogLine.createf\n\n\n\n\nLicense\n\n\nApache 2.0", 
            "title": "Home"
        }, 
        {
            "location": "/#logary", 
            "text": "Logary is a high performance, multi-target logging, metric, tracing and\nhealth-check library for mono and .Net.  Follow Logary at twitter:  @logarylib  Chat and support and get support:  If you like the code, buy me a beer!  Logary v4.0 aims to be compatible with the latest Mono and .Net 4.0. It is\ncompiled with open source F# 4.0.  Logary is continously built on\nCentOS .  Install-Package Logary", 
            "title": "Logary"
        }, 
        {
            "location": "/#why", 
            "text": "Logary is the next generation logging framework. It observes some facts that it\nsuccessfully builds its conceptual model from! It's written using functional\nprogramming in F# with only a single field 'global state' to facilitate logging\nwith initialise-once static readonly fields. It never throws runtime exceptions\nif the configuration validates and never blocks the call-site.", 
            "title": "Why?"
        }, 
        {
            "location": "/#what-now", 
            "text": "Have a look at the  overview of the targets , to get an\nidea about what you can log to! You can read up on the  thinking behind\nlogary . You can also  watch a presentation in\nSwedish \nabout how\nbusiness should log semantically and not just dump it all into a text file!", 
            "title": "What now?"
        }, 
        {
            "location": "/#release-notes", 
            "text": "", 
            "title": "Release Notes"
        }, 
        {
            "location": "/#v40", 
            "text": "Still Alpha...", 
            "title": "v4.0"
        }, 
        {
            "location": "/#v30", 
            "text": "Improved naming; 'Logary.Suave' -  'Logary.Adapters.Suave' -- makes it easier\n   to find what you're after now that we have many adapters and targets.  Moved some adapter types around (see Obsoletes) and made all adapters have\n   the same naming standard.", 
            "title": "v3.0"
        }, 
        {
            "location": "/#v26", 
            "text": "Fixed a filtering bug that meant you'd get more logs sent to your Targets\n   than you wanted.", 
            "title": "v2.6"
        }, 
        {
            "location": "/#v21", 
            "text": "FSharp.Core.3 -  FSharp.Core  Bumped all nuget versions to latest", 
            "title": "v2.1"
        }, 
        {
            "location": "/#v202", 
            "text": "Support CommonLogging fully  New  Logary.Adapters.EventStore  New function  LogLine.createf", 
            "title": "v2.0.2"
        }, 
        {
            "location": "/#license", 
            "text": "Apache 2.0", 
            "title": "License"
        }, 
        {
            "location": "/api/", 
            "text": "API\n\n\nThis package works great with F#:\n\n\nopen System\n\nopen NodaTime\n\nopen Logary\nopen Logary.Configuration\nopen Logary.Targets\nopen Logary.Metrics\n\n[\nEntryPoint\n]\nlet main argv =\n  use logary =\n    withLogaryManager \nRiemann.Example\n (\n      withTargets [\n        Riemann.create (Riemann.RiemannConf.create(tags = [\nriemann-health\n])) (PointName.ofSingle \nriemann\n)\n        Console.create Console.empty (PointName.ofSingle \nconsole\n)\n      ] \n\n      withMetrics (Duration.FromMilliseconds 5000L) [\n        WinPerfCounters.create (WinPerfCounters.Common.cpuTimeConf) (PointName.ofSingle \nwperf\n)(Duration.FromMilliseconds 300L)\n      ] \n\n      withRules [\n        Rule.createForTarget (PointName.ofSingle \nriemann\n)\n        Rule.createForTarget (PointName.ofSingle \nconsole\n)\n      ] \n\n      withInternalTargets Info [\n        Console.create (Console.empty) (PointName.ofSingle \nconsole\n)\n      ]\n    ) |\n Hopac.TopLevel.run\n\n  Console.ReadKey true |\n ignore\n  0\n\n\n\n\nNow you can get a logger through the \nLogging\n module:\n\n\nF#\n\n\nlet logger = Logging.getCurrentLogger ()\nlet another = Logging.getLoggerByName \nCorp.App.Svc\n\nlet writeLog x = Logary.Logger.log logger x |\n Hopac.TopLevel.start\nLogary.Message.eventDebug \ntest\n |\n writeLog\n\n\n\n\nor in \nC#\n\n\nnamespace A {\n  class X {\n    static readonly Logger _logger = Logging.GetCurrentLogger();\n    void XX () {\n      _logger.Info(\nhello world\n);\n    }\n  }\n}\n\n\n\n\nThe Logger module will automatically discover the current\ncall-site/function/module/class.and use its hierarchy to create a new logger.\nThe idea is that you can use Rule.hiera regexpes to selectively enable or\ndisable loggers, just like you can in NLog and log4net.\n\n\nThe static logger is automatically wired up to the framework the instant that\nyou run the \nwithLogary'\n or \nrunWithGoodDefaults\n from the\n\nLogary.Configuration\n namespace (in which you find the \nConfig\n module).\n\n\nHealthChecks, Metrics, Probes\n\n\nHealth Checks are like probes, but know how to interpret the results into the\nwarning-levels of \nLogLevel\n.\n\n\nMetrics: This is currently fairly well-working - have a look at the SQLHealthService for\nan example of a Probe.\n\n\nC# \n VB fa\u00e7ade\n\n\nThis facade is useful when you're using C# \n\n\nInstall-Package Logary.CSharp\n\n\n\n\nIt adds extension methods to the \nLogary\n namespace. Just import the namespace\nto get access to the extension methods, while having the nuget/dll referenced.\n\n\nusing System;\nusing System.Data.SQLite;\nusing System.Text.RegularExpressions;\nusing FluentMigrator.Runner.Announcers;\nusing FluentMigrator.Runner.Generators.SQLite;\nusing FluentMigrator.Runner.Processors.Sqlite;\nusing Logary;\nusing Logary.Configuration;\nusing Logary.DB.Migrations;\nusing Logary.Target;\nusing Console = System.Console;\n\nnamespace Logary.Specs.Examples\n{\n    public class When_using_fluent_API\n    {\n        public void UsageExample()\n        {\n            var x = LogaryFactory.New(\nLogary Specs\n,\n                with =\n with.Target\nTextWriter.Builder\n(\n                    \nconsole1\n,\n                    conf =\n\n                    conf.Target.WriteTo(Console.Out, Console.Error)\n                        .MinLevel(LogLevel.Verbose)\n                        .AcceptIf(line =\n true)\n                        .SourceMatching(new Regex(\n.*\n))\n                    )\n                    .Target\nGraphite.Builder\n(\n                        \ngraphite\n,\n                        conf =\n conf.Target.ConnectTo(\n127.0.0.1\n, 2131)\n                    )\n                    .Target\nDebugger.Builder\n(\ndebugger\n)\n                    .Target\nLogstash.Builder\n(\n                        \nls\n,\n                        conf =\n conf.Target\n                            .Hostname(\nlocalhost\n)\n                            .Port(1936)\n                            .EventVersion(Logstash.EventVersion.One)\n                            .Done())\n                    .Target\nDB.Builder\n(\ndb\n,\n                        conf =\n conf.Target\n                            .ConnectionFactory(() =\n new SQLiteConnection())\n                            .DefaultSchema()\n                            .MigrateUp(\n                                conn =\n new SqliteProcessor(conn,\n                                    new SqliteGenerator(),\n                                    new ConsoleAnnouncer(),\n                                    new MigrationOptions(false, \n, 60),\n                                    new SqliteDbFactory())))\n                );\n\n            var logger = x.GetLogger(\nSample.Config\n);\n\n            logger.Log(\nHello world\n, LogLevel.Debug, new\n                {\n                    important = \nyes\n\n                });\n\n            logger.Log(LogLevel.Fatal, \nFatal application error on finaliser thread\n);\n\n            logger.Verbose(\nimmegawd immegawd immegawd!!\n, \ntag1\n, \ntag2\n);\n\n            var val = logger.TimePath(\nsample.config.compute_answer_to_everything\n, () =\n\n                {\n                    for (int i = 0; i \n 100; i++)\n                        System.Threading.Thread.Sleep(1);\n\n                    return 32;\n                });\n\n            logger.LogFormat(LogLevel.Warn, \n{0} is the answer to the universe and everything\n, val);\n\n            logger.Time(() =\n logger.Debug(\nI wonder how long this takes\n, \nintrospection\n, \nnavel-gazing\n));\n\n            try\n            {\n                throw new ApplicationException(\nthing went haywire\n);\n            }\n            catch (Exception e)\n            {\n                logger.DebugException(\nexpecting haywire, so we're telling with debug\n, e, \nhaywire\n, \nexternal\n);\n            }\n        }\n    }\n}", 
            "title": "API"
        }, 
        {
            "location": "/api/#api", 
            "text": "This package works great with F#:  open System\n\nopen NodaTime\n\nopen Logary\nopen Logary.Configuration\nopen Logary.Targets\nopen Logary.Metrics\n\n[ EntryPoint ]\nlet main argv =\n  use logary =\n    withLogaryManager  Riemann.Example  (\n      withTargets [\n        Riemann.create (Riemann.RiemannConf.create(tags = [ riemann-health ])) (PointName.ofSingle  riemann )\n        Console.create Console.empty (PointName.ofSingle  console )\n      ]  \n      withMetrics (Duration.FromMilliseconds 5000L) [\n        WinPerfCounters.create (WinPerfCounters.Common.cpuTimeConf) (PointName.ofSingle  wperf )(Duration.FromMilliseconds 300L)\n      ]  \n      withRules [\n        Rule.createForTarget (PointName.ofSingle  riemann )\n        Rule.createForTarget (PointName.ofSingle  console )\n      ]  \n      withInternalTargets Info [\n        Console.create (Console.empty) (PointName.ofSingle  console )\n      ]\n    ) |  Hopac.TopLevel.run\n\n  Console.ReadKey true |  ignore\n  0  Now you can get a logger through the  Logging  module:  F#  let logger = Logging.getCurrentLogger ()\nlet another = Logging.getLoggerByName  Corp.App.Svc \nlet writeLog x = Logary.Logger.log logger x |  Hopac.TopLevel.start\nLogary.Message.eventDebug  test  |  writeLog  or in  C#  namespace A {\n  class X {\n    static readonly Logger _logger = Logging.GetCurrentLogger();\n    void XX () {\n      _logger.Info( hello world );\n    }\n  }\n}  The Logger module will automatically discover the current\ncall-site/function/module/class.and use its hierarchy to create a new logger.\nThe idea is that you can use Rule.hiera regexpes to selectively enable or\ndisable loggers, just like you can in NLog and log4net.  The static logger is automatically wired up to the framework the instant that\nyou run the  withLogary'  or  runWithGoodDefaults  from the Logary.Configuration  namespace (in which you find the  Config  module).", 
            "title": "API"
        }, 
        {
            "location": "/api/#healthchecks-metrics-probes", 
            "text": "Health Checks are like probes, but know how to interpret the results into the\nwarning-levels of  LogLevel .  Metrics: This is currently fairly well-working - have a look at the SQLHealthService for\nan example of a Probe.", 
            "title": "HealthChecks, Metrics, Probes"
        }, 
        {
            "location": "/api/#c-vb-facade", 
            "text": "This facade is useful when you're using C#   Install-Package Logary.CSharp  It adds extension methods to the  Logary  namespace. Just import the namespace\nto get access to the extension methods, while having the nuget/dll referenced.  using System;\nusing System.Data.SQLite;\nusing System.Text.RegularExpressions;\nusing FluentMigrator.Runner.Announcers;\nusing FluentMigrator.Runner.Generators.SQLite;\nusing FluentMigrator.Runner.Processors.Sqlite;\nusing Logary;\nusing Logary.Configuration;\nusing Logary.DB.Migrations;\nusing Logary.Target;\nusing Console = System.Console;\n\nnamespace Logary.Specs.Examples\n{\n    public class When_using_fluent_API\n    {\n        public void UsageExample()\n        {\n            var x = LogaryFactory.New( Logary Specs ,\n                with =  with.Target TextWriter.Builder (\n                     console1 ,\n                    conf = \n                    conf.Target.WriteTo(Console.Out, Console.Error)\n                        .MinLevel(LogLevel.Verbose)\n                        .AcceptIf(line =  true)\n                        .SourceMatching(new Regex( .* ))\n                    )\n                    .Target Graphite.Builder (\n                         graphite ,\n                        conf =  conf.Target.ConnectTo( 127.0.0.1 , 2131)\n                    )\n                    .Target Debugger.Builder ( debugger )\n                    .Target Logstash.Builder (\n                         ls ,\n                        conf =  conf.Target\n                            .Hostname( localhost )\n                            .Port(1936)\n                            .EventVersion(Logstash.EventVersion.One)\n                            .Done())\n                    .Target DB.Builder ( db ,\n                        conf =  conf.Target\n                            .ConnectionFactory(() =  new SQLiteConnection())\n                            .DefaultSchema()\n                            .MigrateUp(\n                                conn =  new SqliteProcessor(conn,\n                                    new SqliteGenerator(),\n                                    new ConsoleAnnouncer(),\n                                    new MigrationOptions(false,  , 60),\n                                    new SqliteDbFactory())))\n                );\n\n            var logger = x.GetLogger( Sample.Config );\n\n            logger.Log( Hello world , LogLevel.Debug, new\n                {\n                    important =  yes \n                });\n\n            logger.Log(LogLevel.Fatal,  Fatal application error on finaliser thread );\n\n            logger.Verbose( immegawd immegawd immegawd!! ,  tag1 ,  tag2 );\n\n            var val = logger.TimePath( sample.config.compute_answer_to_everything , () = \n                {\n                    for (int i = 0; i   100; i++)\n                        System.Threading.Thread.Sleep(1);\n\n                    return 32;\n                });\n\n            logger.LogFormat(LogLevel.Warn,  {0} is the answer to the universe and everything , val);\n\n            logger.Time(() =  logger.Debug( I wonder how long this takes ,  introspection ,  navel-gazing ));\n\n            try\n            {\n                throw new ApplicationException( thing went haywire );\n            }\n            catch (Exception e)\n            {\n                logger.DebugException( expecting haywire, so we're telling with debug , e,  haywire ,  external );\n            }\n        }\n    }\n}", 
            "title": "C# &amp; VB fa\u00e7ade"
        }, 
        {
            "location": "/targets/overview/", 
            "text": "Targets Overview\n\n\nThese are the targets supported by Logary. If you write a target, then send a PR\ntowards this documentation and everyone can enjoy using it!\n\n\nSome targets have been extensively tested and some less. We have the same\nmilestone-model as \nlogstash\n:\n\n\nMilestone 0\n\n\nDevelopment on this target has just begun and you can't expect everything, if\nanything, to work. If you are interested in the functionality, please\ncontribute your time!\n\n\nMilestone 1\n\n\nPlugins at this milestone need your feedback to improve! Plugins at this\nmilestone may change between releases as the community figures out the best way\nfor the plugin to behave and be configured.\n\n\nMilestone 2\n\n\nPlugins at this milestone are more likely to have backwards-compatibility to\nprevious releases than do Milestone 1 plugins. This milestone also indicates a\ngreater level of in-the-wild usage by the community than the previous milestone.\n\n\nMilestone 3\n\n\nPlugins at this milestone have strong promises towards backwards-compatibility.\nThis is enforced with automated tests to ensure behavior and configuration are\nconsistent across releases.\n\n\nAvailable Targets\n\n\n\n\n\n\n\n\nTarget\n\n\nCapabilities\n\n\nMilestone\n\n\n\n\n\n\n\n\n\n\nTextWriter\n\n\nLogLine, Measure\n\n\n3\n\n\n\n\n\n\nConsole\n\n\nLogLine,\n\n\n3\n\n\n\n\n\n\nDebugger\n\n\nLogLine, Measure\n\n\n3\n\n\n\n\n\n\nLogstash\n\n\nLogLine\n\n\n3\n\n\n\n\n\n\nGraphite\n\n\nMeasure\n\n\n1\n\n\n\n\n\n\nElmah.IO\n\n\nLogLine\n\n\n2\n\n\n\n\n\n\nLogentries\n\n\nLogLine\n\n\n1\n\n\n\n\n\n\nRiemann\n\n\nLogLine\n\n\n2\n\n\n\n\n\n\nDB\n\n\nLogLine, Measure\n\n\n2\n\n\n\n\n\n\nDash\n\n\nLogLine, Measure\n\n\n0\n\n\n\n\n\n\nZipKin\n\n\nLogLine, Measure\n\n\n0", 
            "title": "Overview"
        }, 
        {
            "location": "/targets/overview/#targets-overview", 
            "text": "These are the targets supported by Logary. If you write a target, then send a PR\ntowards this documentation and everyone can enjoy using it!  Some targets have been extensively tested and some less. We have the same\nmilestone-model as  logstash :", 
            "title": "Targets Overview"
        }, 
        {
            "location": "/targets/overview/#milestone-0", 
            "text": "Development on this target has just begun and you can't expect everything, if\nanything, to work. If you are interested in the functionality, please\ncontribute your time!", 
            "title": "Milestone 0"
        }, 
        {
            "location": "/targets/overview/#milestone-1", 
            "text": "Plugins at this milestone need your feedback to improve! Plugins at this\nmilestone may change between releases as the community figures out the best way\nfor the plugin to behave and be configured.", 
            "title": "Milestone 1"
        }, 
        {
            "location": "/targets/overview/#milestone-2", 
            "text": "Plugins at this milestone are more likely to have backwards-compatibility to\nprevious releases than do Milestone 1 plugins. This milestone also indicates a\ngreater level of in-the-wild usage by the community than the previous milestone.", 
            "title": "Milestone 2"
        }, 
        {
            "location": "/targets/overview/#milestone-3", 
            "text": "Plugins at this milestone have strong promises towards backwards-compatibility.\nThis is enforced with automated tests to ensure behavior and configuration are\nconsistent across releases.", 
            "title": "Milestone 3"
        }, 
        {
            "location": "/targets/overview/#available-targets", 
            "text": "Target  Capabilities  Milestone      TextWriter  LogLine, Measure  3    Console  LogLine,  3    Debugger  LogLine, Measure  3    Logstash  LogLine  3    Graphite  Measure  1    Elmah.IO  LogLine  2    Logentries  LogLine  1    Riemann  LogLine  2    DB  LogLine, Measure  2    Dash  LogLine, Measure  0    ZipKin  LogLine, Measure  0", 
            "title": "Available Targets"
        }, 
        {
            "location": "/targets/textwriter/", 
            "text": "Logary.TextWriter\n\n\nFor LogLines | builtin\n\n\nWrite to any text writer - such as one from \nSystem.IO.File.OpenWrite\n.\n\n\nInstall-Package Logary\n\n\n\n\nopen System\nopen System.IO\n\nopen NodaTime\nopen Logary\nopen Logary.Configuration\nopen Logary.Targets\nopen Logary.Metrics\n\n#if INTERACTIVE\nlet path = __SOURCE_DIRECTORY__\n#else\nlet path = System.Reflection.Assembly.GetExecutingAssembly().Location |\n Path.GetDirectoryName\n[\nEntryPoint\n]\n#endif\nlet main argv =\n  use logary =\n    withLogaryManager \nTextWriter.Example\n (\n      withTargets [\n        Logary.Targets.TextWriter.create(\n            let textConf = \n                TextWriter.TextWriterConf.create(\n                    Path.Combine(path, DateTime.UtcNow.ToString(\nyyyy-MM\n) + \n-happy.log\n) |\n File.AppendText, \n                    Path.Combine(path, DateTime.UtcNow.ToString(\nyyyy-MM\n) + \n-sad.log\n) |\n File.AppendText)\n            let newConf = { textConf with flush = true }\n            newConf\n        ) (PointName.ofSingle \nfilelogger\n)\n      ] \n\n      withRules [\n        Rule.createForTarget (PointName.ofSingle \nfilelogger\n)\n      ]\n    ) |\n Hopac.TopLevel.run\n\n  Console.ReadKey true |\n ignore\n  0", 
            "title": "TextWriter"
        }, 
        {
            "location": "/targets/textwriter/#logarytextwriter", 
            "text": "For LogLines | builtin  Write to any text writer - such as one from  System.IO.File.OpenWrite .  Install-Package Logary  open System\nopen System.IO\n\nopen NodaTime\nopen Logary\nopen Logary.Configuration\nopen Logary.Targets\nopen Logary.Metrics\n\n#if INTERACTIVE\nlet path = __SOURCE_DIRECTORY__\n#else\nlet path = System.Reflection.Assembly.GetExecutingAssembly().Location |  Path.GetDirectoryName\n[ EntryPoint ]\n#endif\nlet main argv =\n  use logary =\n    withLogaryManager  TextWriter.Example  (\n      withTargets [\n        Logary.Targets.TextWriter.create(\n            let textConf = \n                TextWriter.TextWriterConf.create(\n                    Path.Combine(path, DateTime.UtcNow.ToString( yyyy-MM ) +  -happy.log ) |  File.AppendText, \n                    Path.Combine(path, DateTime.UtcNow.ToString( yyyy-MM ) +  -sad.log ) |  File.AppendText)\n            let newConf = { textConf with flush = true }\n            newConf\n        ) (PointName.ofSingle  filelogger )\n      ]  \n      withRules [\n        Rule.createForTarget (PointName.ofSingle  filelogger )\n      ]\n    ) |  Hopac.TopLevel.run\n\n  Console.ReadKey true |  ignore\n  0", 
            "title": "Logary.TextWriter"
        }, 
        {
            "location": "/targets/console/", 
            "text": "Console - Logary Target\n\n\nFor LogLines | builtin\n\n\nWrites output messages to \nSystem.Console.Out\n and Error, and Fatal LogLines\nto \nSystem.Console.Error\n.\n\n\nInstall-Package Logary\n\n\n\n\nThe console target is very simple to use and create:\n\n\nuse logary =\n  withLogaryManager \nConsole Example\n (\n    withTargets [\n      Console.create (Console.empty) (PointName.ofSingle \nconsole\n)\n    ] \n\n    withRules [\n      Rule.createForTarget (PointName.ofSingle \nconsole\n)\n    ])\n\n\n\n\nvar x = LogaryFactory.New(\nLogary Specs\n, with =\n with.Target\nConsole.Builder\n());", 
            "title": "Console"
        }, 
        {
            "location": "/targets/console/#console-logary-target", 
            "text": "For LogLines | builtin  Writes output messages to  System.Console.Out  and Error, and Fatal LogLines\nto  System.Console.Error .  Install-Package Logary  The console target is very simple to use and create:  use logary =\n  withLogaryManager  Console Example  (\n    withTargets [\n      Console.create (Console.empty) (PointName.ofSingle  console )\n    ]  \n    withRules [\n      Rule.createForTarget (PointName.ofSingle  console )\n    ])  var x = LogaryFactory.New( Logary Specs , with =  with.Target Console.Builder ());", 
            "title": "Console - Logary Target"
        }, 
        {
            "location": "/targets/debugger/", 
            "text": "Debugger - Logary Target\n\n\nFor LogLines | builtin\n\n\nWrites all output to the Debugger-console of Visual Studio, Xamarin Studio or\nMonoDevelop.\n\n\nInstall-Package Logary", 
            "title": "Debugger"
        }, 
        {
            "location": "/targets/debugger/#debugger-logary-target", 
            "text": "For LogLines | builtin  Writes all output to the Debugger-console of Visual Studio, Xamarin Studio or\nMonoDevelop.  Install-Package Logary", 
            "title": "Debugger - Logary Target"
        }, 
        {
            "location": "/targets/file/", 
            "text": "File - Logary Target\n\n\nThe file target is currently a planned target. If you really want to log to\nfile, in the mean while, use \nSystem.IO.File.OpenWrite\n and pass the\n\nTextWriter\n you get back, to the \nTextWriter\n target.\n\n\nSee: https://logary.github.io/targets/textwriter/", 
            "title": "File"
        }, 
        {
            "location": "/targets/file/#file-logary-target", 
            "text": "The file target is currently a planned target. If you really want to log to\nfile, in the mean while, use  System.IO.File.OpenWrite  and pass the TextWriter  you get back, to the  TextWriter  target.  See: https://logary.github.io/targets/textwriter/", 
            "title": "File - Logary Target"
        }, 
        {
            "location": "/targets/logstash/", 
            "text": "Logstash - Logary Target\n\n\nFor LogLines | builtin\n\n\nLogstash is\na log router that can move your logs to the best location available.\n\n\n\n\nManage events and logs\n. Elasticsearch works seamlessly with Logstash to\ncollect, parse, index, and search logs\n\n\n\n\nInstall-Package Logary\n\n\n\n\n\n\nThis target sends logs to logstash using a TCP socket, meaning there's not that\nmuch to set up to get started. This means that once in a blue moon you'll\nlose log lines - but often this is not a big issue, because you don't take\napplication business logic decisions on log lines.\n\n\nAPI\n\n\nopen System\n\nopen Logary\nopen Logary.Configuration\nopen Logary.Targets\n\n[\nEntryPoint\n]\nlet main argv =\n  use logary =\n    withLogary' \nRiemann.Example\n (\n      withTargets [\n        Logstash.create (Logstash.LogstashConf.Create(\nlogstash.prod.corp.tld\n,\n1939us)) \nlogstash\n\n      ] \n\n      withRules [\n        Rule.createForTarget \nlogstash\n\n      ]\n    )\n\n  Console.ReadKey true |\n ignore\n  0\n\n\n\n\n\nLogstash config\n\n\nLogstash can only take 'json' codec from things that do proper framing, such as\nmessage brokers.\n\n\ninput {\n  tcp {\n    codec =\n json_lines { charset =\n \nUTF-8\n }\n    host  =\n \n0.0.0.0\n\n    port  =\n 1939\n    type  =\n \napps\n\n  }\n}", 
            "title": "Logstash"
        }, 
        {
            "location": "/targets/logstash/#logstash-logary-target", 
            "text": "For LogLines | builtin  Logstash is\na log router that can move your logs to the best location available.   Manage events and logs . Elasticsearch works seamlessly with Logstash to\ncollect, parse, index, and search logs   Install-Package Logary   This target sends logs to logstash using a TCP socket, meaning there's not that\nmuch to set up to get started. This means that once in a blue moon you'll\nlose log lines - but often this is not a big issue, because you don't take\napplication business logic decisions on log lines.", 
            "title": "Logstash - Logary Target"
        }, 
        {
            "location": "/targets/logstash/#api", 
            "text": "open System\n\nopen Logary\nopen Logary.Configuration\nopen Logary.Targets\n\n[ EntryPoint ]\nlet main argv =\n  use logary =\n    withLogary'  Riemann.Example  (\n      withTargets [\n        Logstash.create (Logstash.LogstashConf.Create( logstash.prod.corp.tld ,\n1939us))  logstash \n      ]  \n      withRules [\n        Rule.createForTarget  logstash \n      ]\n    )\n\n  Console.ReadKey true |  ignore\n  0", 
            "title": "API"
        }, 
        {
            "location": "/targets/logstash/#logstash-config", 
            "text": "Logstash can only take 'json' codec from things that do proper framing, such as\nmessage brokers.  input {\n  tcp {\n    codec =  json_lines { charset =   UTF-8  }\n    host  =   0.0.0.0 \n    port  =  1939\n    type  =   apps \n  }\n}", 
            "title": "Logstash config"
        }, 
        {
            "location": "/targets/graphite/", 
            "text": "Graphite - Logary Target\n\n\nFor Measures | builtin\n\n\nThe \ngraphite\n target is a mature target for\nsending Measures from your application.\n\n\n\n\nGraphite - Scalable Realtime Graphing.\n  Graphite is a highly scalable\nreal-time graphing system. As a user, you write an application that collects\nnumeric time-series data that you are interested in graphing, and send it to\nGraphite's processing backend, carbon, which stores the data in Graphite's\nspecialized database. The data can then be visualized through graphite's web\ninterfaces.\n\n\n\n\nBest used in conjunction with \nGrafana\n (a web front-end):\n\n\n\n\nAn open source, feature rich metrics dashboard and graph editor for Graphite,\nInfluxDB \n OpenTSDB. Rich graphing: Fast and flexible client side graphs with\na multitude of options.\n\n\n\n\nInstall-Package Logary", 
            "title": "Graphite"
        }, 
        {
            "location": "/targets/graphite/#graphite-logary-target", 
            "text": "For Measures | builtin  The  graphite  target is a mature target for\nsending Measures from your application.   Graphite - Scalable Realtime Graphing.   Graphite is a highly scalable\nreal-time graphing system. As a user, you write an application that collects\nnumeric time-series data that you are interested in graphing, and send it to\nGraphite's processing backend, carbon, which stores the data in Graphite's\nspecialized database. The data can then be visualized through graphite's web\ninterfaces.   Best used in conjunction with  Grafana  (a web front-end):   An open source, feature rich metrics dashboard and graph editor for Graphite,\nInfluxDB   OpenTSDB. Rich graphing: Fast and flexible client side graphs with\na multitude of options.   Install-Package Logary", 
            "title": "Graphite - Logary Target"
        }, 
        {
            "location": "/targets/elmahio/", 
            "text": "Elmah.IO - Logary Target\n\n\nFor LogLines\n\n\nInterop target if you are writing a web application and have\n\nElmah.IO\n as your log dashboard. \n.Net developer friendly indeed\n.\n\n\nInstall-Package Logary.Targets.ElmahIO", 
            "title": "ElmahIO"
        }, 
        {
            "location": "/targets/elmahio/#elmahio-logary-target", 
            "text": "For LogLines  Interop target if you are writing a web application and have Elmah.IO  as your log dashboard.  .Net developer friendly indeed .  Install-Package Logary.Targets.ElmahIO", 
            "title": "Elmah.IO - Logary Target"
        }, 
        {
            "location": "/targets/logentries/", 
            "text": "Logentries - Logary Target\n\n\nFor LogLines and Measures\n\n\n\n\nFast Search \n Real-time Log Processing - Centralized search, aggregation, and\ncorrelation. See query results in seconds.\n\n\n\n\nInstall-Package Logary.Targets.Logentries\n\n\n\n\nAll logging to Logentries is encrypted.", 
            "title": "Logentries"
        }, 
        {
            "location": "/targets/logentries/#logentries-logary-target", 
            "text": "For LogLines and Measures   Fast Search   Real-time Log Processing - Centralized search, aggregation, and\ncorrelation. See query results in seconds.   Install-Package Logary.Targets.Logentries  All logging to Logentries is encrypted.", 
            "title": "Logentries - Logary Target"
        }, 
        {
            "location": "/targets/loggr/", 
            "text": "Loggr - Logary Target\n\n\nFor LogLines\n\n\n\n\nMonitor Your Web Apps in Realtime\n\nGet a control panel for your web app with event logging, user monitoring,\nanalytics, notifications and more\n\n\n\n\nInstall-Package Logary.Targets.Loggr", 
            "title": "Loggr"
        }, 
        {
            "location": "/targets/loggr/#loggr-logary-target", 
            "text": "For LogLines   Monitor Your Web Apps in Realtime \nGet a control panel for your web app with event logging, user monitoring,\nanalytics, notifications and more   Install-Package Logary.Targets.Loggr", 
            "title": "Loggr - Logary Target"
        }, 
        {
            "location": "/targets/riemann/", 
            "text": "Riemann - Logary Target\n\n\nFor Measures\n\n\nThis target writes Measures to Riemann and is being used for sending metrics\nfrom SQLServerHealth, for example. Sending them to riemann gives a platform to\nstart acting on what goes on in your system and can be a way to provide\nauto-scaling to your deployments based off of application metrics.\n\n\nRiemann is built in Clojure, and so is its config, so it gives you an\nopportunity to try something new and learn a nice language.\n\n\n\n\nRiemann monitors distributed systems.\n Riemann aggregates events from your\nservers and applications with a powerful stream processing language.\n\n\n\n\nInstall-Package Logary.Targets.Riemann\n\n\n\n\n\n\nAs a matter of fact, I have implemented a brand \nnew .Net\nclient\n\nfor Riemann, to make it stable and to make it fit well with Logary's\nactor-based approach. More usage examples on this will follow.", 
            "title": "Riemann"
        }, 
        {
            "location": "/targets/riemann/#riemann-logary-target", 
            "text": "For Measures  This target writes Measures to Riemann and is being used for sending metrics\nfrom SQLServerHealth, for example. Sending them to riemann gives a platform to\nstart acting on what goes on in your system and can be a way to provide\nauto-scaling to your deployments based off of application metrics.  Riemann is built in Clojure, and so is its config, so it gives you an\nopportunity to try something new and learn a nice language.   Riemann monitors distributed systems.  Riemann aggregates events from your\nservers and applications with a powerful stream processing language.   Install-Package Logary.Targets.Riemann   As a matter of fact, I have implemented a brand  new .Net\nclient \nfor Riemann, to make it stable and to make it fit well with Logary's\nactor-based approach. More usage examples on this will follow.", 
            "title": "Riemann - Logary Target"
        }, 
        {
            "location": "/targets/db/", 
            "text": "DB - Logary Target\n\n\nFor LogLines and Measures\n\n\nThis target logs asynchronously to a database, using ADO.Net. You can configure\nany connection factory through the target's configuration.\n\n\nThe target also comes with \nLogary.DB.Migrations\n that set up the database\nstate for both logs and metrics on boot, if not already existent.\n\n\nInstall-Package Logary.Targets.DB\nInstall-Package Logary.Targets.DB.Migrations", 
            "title": "DB"
        }, 
        {
            "location": "/targets/db/#db-logary-target", 
            "text": "For LogLines and Measures  This target logs asynchronously to a database, using ADO.Net. You can configure\nany connection factory through the target's configuration.  The target also comes with  Logary.DB.Migrations  that set up the database\nstate for both logs and metrics on boot, if not already existent.  Install-Package Logary.Targets.DB\nInstall-Package Logary.Targets.DB.Migrations", 
            "title": "DB - Logary Target"
        }, 
        {
            "location": "/targets/nimrod/", 
            "text": "Nimrod - Logary Target\n\n\nFor LogLines and Measures | builtin\n\n\nNimrod is a metrics server based on log processing - as such it can handle both\nLogLines and Measures.\n\n\n\n\nNimrod is a metrics server purely based on log processing: hence, it doesn't\naffect the way you write your applications, nor has it any side effect on them.\n\n\n\n\nPart of the core assembly:\n\n\nInstall-Package Logary", 
            "title": "Nimrod"
        }, 
        {
            "location": "/targets/nimrod/#nimrod-logary-target", 
            "text": "For LogLines and Measures | builtin  Nimrod is a metrics server based on log processing - as such it can handle both\nLogLines and Measures.   Nimrod is a metrics server purely based on log processing: hence, it doesn't\naffect the way you write your applications, nor has it any side effect on them.   Part of the core assembly:  Install-Package Logary", 
            "title": "Nimrod - Logary Target"
        }, 
        {
            "location": "/targets/dash/", 
            "text": "Dash - Logary Target\n\n\nWork in progress - aims to provide the same dashboard as Metrics.Net, allowing\nyou runtime insight into your programs.\n\n\nInstall-Package Logary.Targets.Dash\n\n\n\n\nThe dashboard uses the awesome F# web server \nsuave.io\n.", 
            "title": "Dash"
        }, 
        {
            "location": "/targets/dash/#dash-logary-target", 
            "text": "Work in progress - aims to provide the same dashboard as Metrics.Net, allowing\nyou runtime insight into your programs.  Install-Package Logary.Targets.Dash  The dashboard uses the awesome F# web server  suave.io .", 
            "title": "Dash - Logary Target"
        }, 
        {
            "location": "/targets/zipkin/", 
            "text": "ZipKin - Logary Target\n\n\nFor LogLines - and adds Spans\n\n\nCurrently work in progress: LogLines and Measures become annotations to Spans\nwhich are correlated in process and then sent through Thrift to the Zipkin\nserver as Spans/traces.\n\n\n\n\nZipkin is a distributed tracing system that helps us gather timing data for\nall the disparate services at Twitter. It manages both the collection and\nlookup of this data through a Collector and a Query service. We closely\nmodelled Zipkin after the Google Dapper paper. Follow @ZipkinProject for\nupdates.\n\n\n\n\nInstall-Package Logary.Targets.Zipkin", 
            "title": "Zipkin"
        }, 
        {
            "location": "/targets/zipkin/#zipkin-logary-target", 
            "text": "For LogLines - and adds Spans  Currently work in progress: LogLines and Measures become annotations to Spans\nwhich are correlated in process and then sent through Thrift to the Zipkin\nserver as Spans/traces.   Zipkin is a distributed tracing system that helps us gather timing data for\nall the disparate services at Twitter. It manages both the collection and\nlookup of this data through a Collector and a Query service. We closely\nmodelled Zipkin after the Google Dapper paper. Follow @ZipkinProject for\nupdates.   Install-Package Logary.Targets.Zipkin", 
            "title": "ZipKin - Logary Target"
        }, 
        {
            "location": "/adapters/overview/", 
            "text": "Logary Adapters\n\n\nAdapters are plug-ins into OTHER libraries, which can then output their internal\nlogs into logary, which in turn takes care of sending those logs further.\n\n\nSuave\n\n\nUsage:\n\n\nlet web_config =\n  { default_config with\n      bindings = context.settings.GetBindings ()\n      logger   = SuaveAdapter(logary.GetLogger \nsuave\n)\n  }\n\n\n\n\nTopshelf\n\n\nUsage\n\n\nTBD\n\n\nEventStore\n\n\nUsage:\n\n\nopen EventStore.ClientAPI\nopen EventStore.ClientAPI.Common.Log\n\nuse logary =  ...\n\nlet conn =\n  ConnectionSettings.configureStart()\n  |\n ConnectionSettings.useCustomLogger (LogaryLogger(logary.GetLogger(\nEventStore\n)))\n  |\n ConnectionSettings.configureEnd (IPEndPoint(IPAddress.Loopback, 1113))\n\n\n\n\nAlso see \nconfiguring\nlogging\n.\n\n\nCommonLogging\n\n\nPlease help fill out!\n\n\nlog4net\n\n\nPlease help fill out!", 
            "title": "Overview"
        }, 
        {
            "location": "/adapters/overview/#logary-adapters", 
            "text": "Adapters are plug-ins into OTHER libraries, which can then output their internal\nlogs into logary, which in turn takes care of sending those logs further.", 
            "title": "Logary Adapters"
        }, 
        {
            "location": "/adapters/overview/#suave", 
            "text": "Usage:  let web_config =\n  { default_config with\n      bindings = context.settings.GetBindings ()\n      logger   = SuaveAdapter(logary.GetLogger  suave )\n  }", 
            "title": "Suave"
        }, 
        {
            "location": "/adapters/overview/#topshelf", 
            "text": "Usage  TBD", 
            "title": "Topshelf"
        }, 
        {
            "location": "/adapters/overview/#eventstore", 
            "text": "Usage:  open EventStore.ClientAPI\nopen EventStore.ClientAPI.Common.Log\n\nuse logary =  ...\n\nlet conn =\n  ConnectionSettings.configureStart()\n  |  ConnectionSettings.useCustomLogger (LogaryLogger(logary.GetLogger( EventStore )))\n  |  ConnectionSettings.configureEnd (IPEndPoint(IPAddress.Loopback, 1113))  Also see  configuring\nlogging .", 
            "title": "EventStore"
        }, 
        {
            "location": "/adapters/overview/#commonlogging", 
            "text": "Please help fill out!", 
            "title": "CommonLogging"
        }, 
        {
            "location": "/adapters/overview/#log4net", 
            "text": "Please help fill out!", 
            "title": "log4net"
        }, 
        {
            "location": "/adapters/eventstore/", 
            "text": "EventStore adapter\n\n\nThe \nEventStore\n adapter is really easy to use; just\ncall \nLogManager.SetLogFactory\n with it.\n\n\nFirst:\n\n\nInstall-Package Logary.Adapters.EventStore\nInstall-Package EventStore.Client.FSharp\n\n\n\n\nto get the nicities for F#.\n\n\nUsage:\n\n\nopen EventStore.ClientAPI\nopen EventStore.ClientAPI.Common.Log\n\nuse logary =  ...\n\nlet conn =\n  ConnectionSettings.configureStart()\n  |\n ConnectionSettings.useCustomLogger (LogaryLogger(logary.GetLogger(\nEventStore\n)))\n  |\n ConnectionSettings.configureEnd (IPEndPoint(IPAddress.Loopback, 1113))\n\n\n\n\nAlso see \nconfiguring\nlogging\n.", 
            "title": "EventStore"
        }, 
        {
            "location": "/adapters/eventstore/#eventstore-adapter", 
            "text": "The  EventStore  adapter is really easy to use; just\ncall  LogManager.SetLogFactory  with it.  First:  Install-Package Logary.Adapters.EventStore\nInstall-Package EventStore.Client.FSharp  to get the nicities for F#.  Usage:  open EventStore.ClientAPI\nopen EventStore.ClientAPI.Common.Log\n\nuse logary =  ...\n\nlet conn =\n  ConnectionSettings.configureStart()\n  |  ConnectionSettings.useCustomLogger (LogaryLogger(logary.GetLogger( EventStore )))\n  |  ConnectionSettings.configureEnd (IPEndPoint(IPAddress.Loopback, 1113))  Also see  configuring\nlogging .", 
            "title": "EventStore adapter"
        }, 
        {
            "location": "/adapters/suave/", 
            "text": "Clavigeri per absensauxilium invenies\n\n\nSuccessu amnis quae felix expalluit diversaque fauni\n\n\nLorem markdownum sanguinis ibat, arguis \nvelamina\n sinistrae provolvi sinus\nquatiatur vita harenae \ntelum\n\nCynthia! \nNon\n palluit eadem sacrilegos imis emicat\nurbesque exitium, progeniem orbem; te, in intus aeraque.\n\n\n\n\nEt quam falso vetustas; egressus lanam, parenti et tamen indoctum dum condi\niaculum summo, potest pectore \nmihi\n. Petit victo quam falle adhuc motis.\nSine eget, \nsubibis huic\n ego aera amplectitur nunc,\noccupat gerere, illa.\n\n\n\n\nPater celeremque illa consiliis illos agrestes, nec vertice ille, ore liquidarum\ngurgite. Potiturque vere \nrelaxant\n, medios esset tuta tibi dat induruit copia\nin cum cum. Et exierat avidas inpugnante deum: eundi neque emisit in carmine\noccupat: pendentes. Pelopeia volucrem contigerant tradit: Palladis natam,\npassibus deo natam portus tenet quoniam \ntotidemque infausto iuvenem\n nebulis.\n\n\nIlla sustulit quae capacibus vocantem sollicitare vocat\n\n\nOre pectus, carcere, trepidos nec fecit triumphis \nprius palustribus mirantes\n,\nonus. \nPietas Samon\n meruit passurae dubitare magis. Ad non prementem atque\nconbibit genus et texit properantibus domus credere lintea: et vocat e obstat.\nManent per Atrides oro medio crines sed hunc laevum absumitur Pentheus satis;\nenim.\n\n\n\n\nFamem est par, quam dixit conatur Syenites vulnere\n\nsilvas\n sequitur Echione; aura flamma ego morte\ndomus? Cunctos fecit Rhamnusidis annum intravere vagantem finire, \naudit\nvoco\n, nihil.\n\n\n\n\nEst et similis annis vides ut litora\n\n\nCoeperunt facit accensus et duro membra referre \nruborem diffugiunt terra\n?\nAchillem dentes tum, et silvarum saevam, esse iterumque animalia piscem; in\ncaedis mihi magni aequoris sagitta ument.\n\n\n\n\nEchecli accipio ignavis\n\n\nPedum loqueretur mater\n\n\nNec nec mutantur tuos ipse suum mora\n\n\nEunti latentia haberet Simois primum Iuppiter capillis\n\n\nTectis illo spumantiaque ille\n\n\nAdsuetos ille concipit mei\n\n\n\n\nLabant\n luctus rupes os meritis nomen \nquam\n causas,\nquam notitiamque orbis modusque per inquit paelice me sic se inmergitque. Esse\ncognovit, diu aggere. Est modo verbis qui totidemque \nangues\n, videri miseri\nquoque ostendens. Credis peremi quondam pericula membris evicere, inducta\nstrepitans Delphice tuus!\n\n\nManifesta et vulnera abscedit vestigia Alcmene ora ora aperti casus Medea\nmoratum verba oculos et gaudete. Lingua faciam puerilibus rursus, corpora,\nmiliaque dirimant orbe, fides.", 
            "title": "Suave"
        }, 
        {
            "location": "/adapters/suave/#clavigeri-per-absensauxilium-invenies", 
            "text": "", 
            "title": "Clavigeri per absensauxilium invenies"
        }, 
        {
            "location": "/adapters/suave/#successu-amnis-quae-felix-expalluit-diversaque-fauni", 
            "text": "Lorem markdownum sanguinis ibat, arguis  velamina  sinistrae provolvi sinus\nquatiatur vita harenae  telum \nCynthia!  Non  palluit eadem sacrilegos imis emicat\nurbesque exitium, progeniem orbem; te, in intus aeraque.   Et quam falso vetustas; egressus lanam, parenti et tamen indoctum dum condi\niaculum summo, potest pectore  mihi . Petit victo quam falle adhuc motis.\nSine eget,  subibis huic  ego aera amplectitur nunc,\noccupat gerere, illa.   Pater celeremque illa consiliis illos agrestes, nec vertice ille, ore liquidarum\ngurgite. Potiturque vere  relaxant , medios esset tuta tibi dat induruit copia\nin cum cum. Et exierat avidas inpugnante deum: eundi neque emisit in carmine\noccupat: pendentes. Pelopeia volucrem contigerant tradit: Palladis natam,\npassibus deo natam portus tenet quoniam  totidemque infausto iuvenem  nebulis.", 
            "title": "Successu amnis quae felix expalluit diversaque fauni"
        }, 
        {
            "location": "/adapters/suave/#illa-sustulit-quae-capacibus-vocantem-sollicitare-vocat", 
            "text": "Ore pectus, carcere, trepidos nec fecit triumphis  prius palustribus mirantes ,\nonus.  Pietas Samon  meruit passurae dubitare magis. Ad non prementem atque\nconbibit genus et texit properantibus domus credere lintea: et vocat e obstat.\nManent per Atrides oro medio crines sed hunc laevum absumitur Pentheus satis;\nenim.   Famem est par, quam dixit conatur Syenites vulnere silvas  sequitur Echione; aura flamma ego morte\ndomus? Cunctos fecit Rhamnusidis annum intravere vagantem finire,  audit\nvoco , nihil.", 
            "title": "Illa sustulit quae capacibus vocantem sollicitare vocat"
        }, 
        {
            "location": "/adapters/suave/#est-et-similis-annis-vides-ut-litora", 
            "text": "Coeperunt facit accensus et duro membra referre  ruborem diffugiunt terra ?\nAchillem dentes tum, et silvarum saevam, esse iterumque animalia piscem; in\ncaedis mihi magni aequoris sagitta ument.   Echecli accipio ignavis  Pedum loqueretur mater  Nec nec mutantur tuos ipse suum mora  Eunti latentia haberet Simois primum Iuppiter capillis  Tectis illo spumantiaque ille  Adsuetos ille concipit mei   Labant  luctus rupes os meritis nomen  quam  causas,\nquam notitiamque orbis modusque per inquit paelice me sic se inmergitque. Esse\ncognovit, diu aggere. Est modo verbis qui totidemque  angues , videri miseri\nquoque ostendens. Credis peremi quondam pericula membris evicere, inducta\nstrepitans Delphice tuus!  Manifesta et vulnera abscedit vestigia Alcmene ora ora aperti casus Medea\nmoratum verba oculos et gaudete. Lingua faciam puerilibus rursus, corpora,\nmiliaque dirimant orbe, fides.", 
            "title": "Est et similis annis vides ut litora"
        }, 
        {
            "location": "/adapters/topshelf/", 
            "text": "Populabile tantum crura dares internodia fassusque et\n\n\nTimoli luce et gremio Thebas vinaque\n\n\nLorem markdownum mihi Brotean idque terga, quibus, Nycteus est et dedit honore!\nFata sit, haec videt Alcyonen passim consistere \nenim\n et magni. Visum colebat\nquam rursusque meris exspatiantur nos incessere meritorum cum his traicit, apud\n\npuer\n. Evincitque magis perdidimus locus, iam in mox, hac veste sed, illud.\n\n\n\n\nDiu postquam verba funes vasto violavit optatis\n\n\nO ostro servat amplexibus aristis parenti\n\n\nPascere dataque obsessos quoque cum non est\n\n\nInfitiatur voluistis decipit licet\n\n\n\n\nQuae se sui aurum grandior cum mixto\n\n\nNotus semina numerum possim nunc, \narmandique mutat\n; tumidi status. Soporem\nmemini dulces esse Cynthus reddita, sollertia saltu sedula Molossa sit, sub\nprosternite, instabat.\n\n\nCrete cum utque possem has caelumque animalia\n\n\nFluitque arvum \nincumbensque nervo dicar\n moliri commemorare Elin: populo\npallentem \nlatuere Hecaben\n non eburnea\nnegata. \nEt quisque\n munera ulciscitur loca Iolaus abripit diversa uterque\nsolas nec Penthea a munus mutatur undamque violas citra fateor? Naris Achillem\nrefert viaeque, moribundum limina euntem medium exigit. Pallorem attulerat\naltera incinxit Iovis.\n\n\nPan\n saevo \ntenuisse\n adest consilium fontes, permansit ubi deceperit cervi.\nIramque munus nativum in tamen deos temerarius pignus altera nunc, utque\nmirantur Orithyia sole per \nproposita\n, tinxit. Nusquam cornu numerare\n\nadscendit\n! Dum manus sit tetigit.\n\n\nUlixem Eumolpo\n\n\nLapsas fuit tura pueri nocens aether somnique, deae hominemque intrat gravidamve\npendentia amissi, canum undis pars indoluit. Vituli victricemque rubet rigidumve\nest palmis admota, visaque tendimus ager properas sternitur ardet; iuga extra\nguttas!\n\n\n\n\nPraecordia animam mortalis sed\n\n\nEt est miseri quid foedera germana\n\n\nEt pugnat relicta custodia\n\n\n\n\nMoenibus \ndescendunt exit\n Herculeis vivitur \nillius manibusque\nquas\n Styphelumque omnis cornua terret per! Perituraque\nPhoebus, sed regit inmitibus truncat reccidit tenuit formas eadem nymphaeque\nmensae. Non certe, potest, quamquam manus sed retia a lacerti cumque de.", 
            "title": "Topshelf"
        }, 
        {
            "location": "/adapters/topshelf/#populabile-tantum-crura-dares-internodia-fassusque-et", 
            "text": "", 
            "title": "Populabile tantum crura dares internodia fassusque et"
        }, 
        {
            "location": "/adapters/topshelf/#timoli-luce-et-gremio-thebas-vinaque", 
            "text": "Lorem markdownum mihi Brotean idque terga, quibus, Nycteus est et dedit honore!\nFata sit, haec videt Alcyonen passim consistere  enim  et magni. Visum colebat\nquam rursusque meris exspatiantur nos incessere meritorum cum his traicit, apud puer . Evincitque magis perdidimus locus, iam in mox, hac veste sed, illud.   Diu postquam verba funes vasto violavit optatis  O ostro servat amplexibus aristis parenti  Pascere dataque obsessos quoque cum non est  Infitiatur voluistis decipit licet", 
            "title": "Timoli luce et gremio Thebas vinaque"
        }, 
        {
            "location": "/adapters/topshelf/#quae-se-sui-aurum-grandior-cum-mixto", 
            "text": "Notus semina numerum possim nunc,  armandique mutat ; tumidi status. Soporem\nmemini dulces esse Cynthus reddita, sollertia saltu sedula Molossa sit, sub\nprosternite, instabat.", 
            "title": "Quae se sui aurum grandior cum mixto"
        }, 
        {
            "location": "/adapters/topshelf/#crete-cum-utque-possem-has-caelumque-animalia", 
            "text": "Fluitque arvum  incumbensque nervo dicar  moliri commemorare Elin: populo\npallentem  latuere Hecaben  non eburnea\nnegata.  Et quisque  munera ulciscitur loca Iolaus abripit diversa uterque\nsolas nec Penthea a munus mutatur undamque violas citra fateor? Naris Achillem\nrefert viaeque, moribundum limina euntem medium exigit. Pallorem attulerat\naltera incinxit Iovis.  Pan  saevo  tenuisse  adest consilium fontes, permansit ubi deceperit cervi.\nIramque munus nativum in tamen deos temerarius pignus altera nunc, utque\nmirantur Orithyia sole per  proposita , tinxit. Nusquam cornu numerare adscendit ! Dum manus sit tetigit.", 
            "title": "Crete cum utque possem has caelumque animalia"
        }, 
        {
            "location": "/adapters/topshelf/#ulixem-eumolpo", 
            "text": "Lapsas fuit tura pueri nocens aether somnique, deae hominemque intrat gravidamve\npendentia amissi, canum undis pars indoluit. Vituli victricemque rubet rigidumve\nest palmis admota, visaque tendimus ager properas sternitur ardet; iuga extra\nguttas!   Praecordia animam mortalis sed  Et est miseri quid foedera germana  Et pugnat relicta custodia   Moenibus  descendunt exit  Herculeis vivitur  illius manibusque\nquas  Styphelumque omnis cornua terret per! Perituraque\nPhoebus, sed regit inmitibus truncat reccidit tenuit formas eadem nymphaeque\nmensae. Non certe, potest, quamquam manus sed retia a lacerti cumque de.", 
            "title": "Ulixem Eumolpo"
        }, 
        {
            "location": "/adapters/log4net/", 
            "text": "log4net Adapter\n\n\nThis adapter is a log4net Appender. It exists, because you might already have\nlibs and software that uses log4net to get things done, and you don't have time\nto completely replace the logging infrastructure throughout your company.\n\n\nWell, you're in luck! Now there's a log4net appender that you can use to get\naccess to all the niceties of Logary.\n\n\nInstall-Package Logary.Adapters.log4net\n\n\n\n\nNow, add the adapter to your log4net configuration -- I recommend having the\nmessage as the only message, instead of polluting the message with all sorts of\ndata-items that automatically get passed to the 'data' property of the LogLine,\nanyhow.\n\n\nHence:\n\n\nappender name=\nLogaryAppender\n type=\nlog4net.Appender.LogaryAppender\n\n    \nlayout type=\nlog4net.Layout.PatternLayout\n\n        \nconversionPattern value=\n%message\n /\n\n    \n/layout\n\n\n/appender\n\n\n\n\n\nHappy logging!", 
            "title": "log4net"
        }, 
        {
            "location": "/adapters/log4net/#log4net-adapter", 
            "text": "This adapter is a log4net Appender. It exists, because you might already have\nlibs and software that uses log4net to get things done, and you don't have time\nto completely replace the logging infrastructure throughout your company.  Well, you're in luck! Now there's a log4net appender that you can use to get\naccess to all the niceties of Logary.  Install-Package Logary.Adapters.log4net  Now, add the adapter to your log4net configuration -- I recommend having the\nmessage as the only message, instead of polluting the message with all sorts of\ndata-items that automatically get passed to the 'data' property of the LogLine,\nanyhow.  Hence:  appender name= LogaryAppender  type= log4net.Appender.LogaryAppender \n     layout type= log4net.Layout.PatternLayout \n         conversionPattern value= %message  / \n     /layout  /appender   Happy logging!", 
            "title": "log4net Adapter"
        }, 
        {
            "location": "/advanced/overview/", 
            "text": "Qui Pallas induruit deerat\n\n\nFugit ab illo paribus letalibus vocibus capreisque\n\n\nLorem markdownum, primum et fontis canos pressa neque Threiciam verba dea litus;\nin. Vestes non, quod fuit, \nrogant nec multo\n copia,\nHypsipyles inde mactatae! Adsuetudine Terea caeli, id longo foramen labens\n\nsuspensus inque\n. Omni ne tibi indigenae ambage\nhamato pulcherrime horas quod, Herculeos, quae mihi iramque ades. Quam arva\ninque, fulgebant gestu; venerande nomina, ignigenamque aestu requiemque omnes\ncaerulaque esset et mearum.\n\n\nrdfTweetBalance = motherboard_simplex(linuxNtfs) + key;\ndomainEpsCdn.transfer_rosetta_esports.mp_codec(baseband.cdAix(\n        servletStorageRj), clipboard_xslt_socket);\nif (card(-5, ipvCharacterPrompt - -2, word_dac_cpm(92, -2))) {\n    dvd_phishing_byte /= hyper_virtual;\n    hypertextKeyboardTft = paste_word_capacity;\n    hub += -2 - myspace + -1;\n} else {\n    northbridge_html /= logic.ribbonQuad(disk, 1);\n    cycleProcessor.caseClientClone.characterPublishing(2);\n    socialRuntimeSnmp = directory_clean_topology;\n}\nblog = coreBounceZero / 5 + biometricsEmulation(isdnDma, exportAnsi, mirror(\n        softAspDown, mbps));\n\n\n\nCum virisque\n\n\nCorpus tollite gemitus lambit, si eras imitantes. Nec inquam iuncti, monte aura\nut terras \npaternis noster Iphitiden\n\niuga saxa \nde lupi et\n. Inania tumens \nnunc\nlavit\n speculo ubi; caesumque pietas latura si pinum, est\n\npatrem\n.\n\n\nlocalhost.bar(637216);\nif (2 + snippetMicrophoneTransistor * file_gnutella) {\n    cybersquatter.dayJson = osi(soft_lossy_win, yottabyte);\n    title_cyberspace = reader(modifier_impression, real - string);\n} else {\n    web = tftp_wddm_scanner;\n    keyboardAlpha(1, gigabit_import_thread);\n}\ncpl_flops += cc;\n\n\n\nDamnavit valido montes potiunda\n\n\nNactus casusve\n frater tellus. Arvis tanta\npectus; Athamas fuit data supplex veni fato. Pecoris in solvere nymphis,\nscopulos aliquid inpulsumque dulces nostros Romanam viscera. Lucoque\n\nvulnera\n.\n\n\nntfs = wep(rssCompression, fragmentationTunneling + icio_page +\n        trackballRepeaterEncryption);\nmms(244001 + twitterBackside, ip(1));\nif (876687 \n= virusBsodZero(bingKeyboard(format_subnet, -5))) {\n    default *= blob_buffer_jpeg(bittorrent_vista_simm, aix_operation_pim);\n    microphone_operation(cutLock, primaryBoolean(66, 3), dot);\n}\neCd.rfid(log(cardBin, analog_rte + cloud_requirements_hardening),\n        rpcSoftOperating);\nbatchCpmEnterprise.ispSerp += -2;\n\n\n\nFerunt hostem\n\n\nEt \nerat liquidis\n et patrem, ut Saturnia fuit. Somnusque modo meritis,\nexcedere licet in eadem ratione, easdem, matris; dis quia Rutulum litora mihi\ndiu! Adfligi donaverit arbor, magna sint dedit vertere est. Angues obstat fletus\nsed color tumulo res, facinus quoque, accingitur latumque Clymene.\n\n\nLactantia duxit, hos conde relinquam de retro in felix vicimus posita in\noblitus, ad serpentigenis. Advena fonti recepit praetemptanda monedula, numerum\nposuit functa patitur singula sustinet facibusque licebit vota. Medio nulla\ncertamine iuvenis creati amore, removete nullo Crotonis quam victoria, \ntum\ndomum\n.", 
            "title": "Overview"
        }, 
        {
            "location": "/advanced/overview/#qui-pallas-induruit-deerat", 
            "text": "", 
            "title": "Qui Pallas induruit deerat"
        }, 
        {
            "location": "/advanced/overview/#fugit-ab-illo-paribus-letalibus-vocibus-capreisque", 
            "text": "Lorem markdownum, primum et fontis canos pressa neque Threiciam verba dea litus;\nin. Vestes non, quod fuit,  rogant nec multo  copia,\nHypsipyles inde mactatae! Adsuetudine Terea caeli, id longo foramen labens suspensus inque . Omni ne tibi indigenae ambage\nhamato pulcherrime horas quod, Herculeos, quae mihi iramque ades. Quam arva\ninque, fulgebant gestu; venerande nomina, ignigenamque aestu requiemque omnes\ncaerulaque esset et mearum.  rdfTweetBalance = motherboard_simplex(linuxNtfs) + key;\ndomainEpsCdn.transfer_rosetta_esports.mp_codec(baseband.cdAix(\n        servletStorageRj), clipboard_xslt_socket);\nif (card(-5, ipvCharacterPrompt - -2, word_dac_cpm(92, -2))) {\n    dvd_phishing_byte /= hyper_virtual;\n    hypertextKeyboardTft = paste_word_capacity;\n    hub += -2 - myspace + -1;\n} else {\n    northbridge_html /= logic.ribbonQuad(disk, 1);\n    cycleProcessor.caseClientClone.characterPublishing(2);\n    socialRuntimeSnmp = directory_clean_topology;\n}\nblog = coreBounceZero / 5 + biometricsEmulation(isdnDma, exportAnsi, mirror(\n        softAspDown, mbps));", 
            "title": "Fugit ab illo paribus letalibus vocibus capreisque"
        }, 
        {
            "location": "/advanced/overview/#cum-virisque", 
            "text": "Corpus tollite gemitus lambit, si eras imitantes. Nec inquam iuncti, monte aura\nut terras  paternis noster Iphitiden \niuga saxa  de lupi et . Inania tumens  nunc\nlavit  speculo ubi; caesumque pietas latura si pinum, est patrem .  localhost.bar(637216);\nif (2 + snippetMicrophoneTransistor * file_gnutella) {\n    cybersquatter.dayJson = osi(soft_lossy_win, yottabyte);\n    title_cyberspace = reader(modifier_impression, real - string);\n} else {\n    web = tftp_wddm_scanner;\n    keyboardAlpha(1, gigabit_import_thread);\n}\ncpl_flops += cc;", 
            "title": "Cum virisque"
        }, 
        {
            "location": "/advanced/overview/#damnavit-valido-montes-potiunda", 
            "text": "Nactus casusve  frater tellus. Arvis tanta\npectus; Athamas fuit data supplex veni fato. Pecoris in solvere nymphis,\nscopulos aliquid inpulsumque dulces nostros Romanam viscera. Lucoque vulnera .  ntfs = wep(rssCompression, fragmentationTunneling + icio_page +\n        trackballRepeaterEncryption);\nmms(244001 + twitterBackside, ip(1));\nif (876687  = virusBsodZero(bingKeyboard(format_subnet, -5))) {\n    default *= blob_buffer_jpeg(bittorrent_vista_simm, aix_operation_pim);\n    microphone_operation(cutLock, primaryBoolean(66, 3), dot);\n}\neCd.rfid(log(cardBin, analog_rte + cloud_requirements_hardening),\n        rpcSoftOperating);\nbatchCpmEnterprise.ispSerp += -2;", 
            "title": "Damnavit valido montes potiunda"
        }, 
        {
            "location": "/advanced/overview/#ferunt-hostem", 
            "text": "Et  erat liquidis  et patrem, ut Saturnia fuit. Somnusque modo meritis,\nexcedere licet in eadem ratione, easdem, matris; dis quia Rutulum litora mihi\ndiu! Adfligi donaverit arbor, magna sint dedit vertere est. Angues obstat fletus\nsed color tumulo res, facinus quoque, accingitur latumque Clymene.  Lactantia duxit, hos conde relinquam de retro in felix vicimus posita in\noblitus, ad serpentigenis. Advena fonti recepit praetemptanda monedula, numerum\nposuit functa patitur singula sustinet facibusque licebit vota. Medio nulla\ncertamine iuvenis creati amore, removete nullo Crotonis quam victoria,  tum\ndomum .", 
            "title": "Ferunt hostem"
        }, 
        {
            "location": "/advanced/v2-refactor/", 
            "text": "Refactor notes: Logary notes impl metrics\n\n\nMoving towards a dashboard with full metrics, health check and log line support.\n\n\nStep one - primitives\n\n\nCreating the infrastructure to hoise \nPerformanceCounter\n and \n/proc\n polling\nand continuous running on SQL statements into a probe.\n\n\n\n\nMake \nmetric\n an actor interface like \nprobe\n\n\nMake probe similar to \nmetric\n at first\n\n\nCreate a scheduling actor that can run \nsample\n on the probes and metrics\n\n\nA console text-writer target for the above sample\n\n\n\n\nOutstanding Questions\n\n\nHandling of histograms as opposed to simple reservoirs of data?\n\n\nStep two - logary integration\n\n\nTying metrics, probes, health checks together with targets (reporters) and the registry (+ scheduler).\n\n\n\n\nRegister and unregister sampled metric in \nRegistry\n\n\nRegister and unregister sampled probe in \nRegistry\n\n\nRegister and unregister sampled health check in \nRegistry\n\n\nAll three above are \nnever\n \nsampled\n unless:\n\n\nUse a \nRule\n to connect a metric to a target, by specifying what \ndata point\n to use as a gauge. This just calls \nget_value\n on a metric above.\n\n\n\n\nStep three - creating custom probes\n\n\nWhen the infrastructure is in place, we can create probes that solve common problems.\n\n\n\n\nProof of concept probe that uses G\u00f6ran's SQL for SQL Server to continuously report metrics.\n\n\n\n\nStep four - documenting the above\n\n\n\n\nDocument\n how metrics, probes and health checks work and how they differ\n\n\nDocument order of initialisation\n\n\nDocument how to create custom (metric|probe|health check)\n\n\nDocument CLR perf counters, finish writing most common counters\n\n\n\n\nStep five - Health Checks, Probes\n\n\n\n\nCreate health check samples\n\n\nCreate probe samples and handling failing external subsystems?\n\n\n\n\nStep six - integrate new F# Actors?\n\n\nColin doing work to freeze API\n\n\nStep seven - using a dashboard\n\n\nThe above is useless without a nice way to report the values. Create an in-app dashboard that can be used to access the histograms, guages and timers.\n\n\nLet's just use the Apache 2.0 licensed \nMetrics.Net\n dashboard.\n\n\nExtend with JsonDiffPatch\n to avoid sending full state every time.\n\n\nInstead of polling, open a Server-Sent Event socket and get all patches from there, continuously applying it to the in-memory rep.\n\n\nMake sure we can report same data:\n\n\n{\n  \nTimestamp\n:\n2014-07-26T22:54:52.6894+02:00\n,\n  \nGauges\n:{\n      \n.NET Mb in all Heaps\n:732.27,\n      \n.NET Time in GC\n:7.94,\n      \nContention Rate / Sec\n:0.00,\n      \nExceptions Thrown / Sec\n:0.00,\n      \nLogical Threads\n:28.00,\n      \nMb in all Heaps\n:4.36,\n      \nPhysical Threads\n:25.00,\n      \nQueue Length / sec\n:0.00,\n      \nSampleMetrics.DataValue\n:3628800.00,\n      \nSystem AvailableRAM\n:1245.00,\n      \nSystem CPU Usage\n:27.55,\n      \nSystem Disk Reads/sec\n:0.01,\n      \nSystem Disk Writes/sec\n:0.00,\n      \nTime in GC\n:0.06,\n      \nTotal Exceptions\n:465.00\n    },\n  \nCounters\n:{\n      \nNancyFx.ActiveRequests\n:0,\n      \nSampleMetrics.ConcurrentRequests\n:7,\n      \nSampleMetrics.Requests\n:730\n    },\n  \nMeters\n:{\n      \nNancyFx.Errors\n:{\n          \nCount\n:0,\n          \nMeanRate\n:0.00,\n          \nOneMinuteRate\n:0.00,\n          \nFiveMinuteRate\n:0.00,\n          \nFifteenMinuteRate\n:0.00\n        },\n      \nSampleMetrics.Requests\n:{\n          \nCount\n:730,\n          \nMeanRate\n:3.82,\n          \nOneMinuteRate\n:3.93,\n          \nFiveMinuteRate\n:4.98,\n          \nFifteenMinuteRate\n:5.59\n        }\n    },\n  \nHistograms\n:{\n      \nNancyFx.PostAndPutRequestsSize\n:{\n          \nCount\n:0,\n          \nLastValue\n:0.00,\n          \nMin\n:0.00,\n          \nMean\n:0.00,\n          \nMax\n:0.00,\n          \nStdDev\n:0.00,\n          \nMedian\n:0.00,\n          \nPercentile75\n:0.00,\n          \nPercentile95\n:0.00,\n          \nPercentile98\n:0.00,\n          \nPercentile99\n:0.00,\n          \nPercentile999\n:0.00,\n          \nSampleSize\n:0\n        },\n      \nSampleMetrics.ResultsExample\n:{\n          \nCount\n:730,\n          \nLastValue\n:3471.00,\n          \nMin\n:-4942.00,\n          \nMean\n:105.35,\n          \nMax\n:4995.00,\n          \nStdDev\n:2866.55,\n          \nMedian\n:213.00,\n          \nPercentile75\n:2576.00,\n          \nPercentile95\n:4530.00,\n          \nPercentile98\n:4934.00,\n          \nPercentile99\n:4939.00,\n          \nPercentile999\n:4995.00,\n          \nSampleSize\n:730\n        },\n      \nSampleModule.TestRequest.Size\n:{\n          \nCount\n:0,\n          \nLastValue\n:0.00,\n          \nMin\n:0.00,\n          \nMean\n:0.00,\n          \nMax\n:0.00,\n          \nStdDev\n:0.00,\n          \nMedian\n:0.00,\n          \nPercentile75\n:0.00,\n          \nPercentile95\n:0.00,\n          \nPercentile98\n:0.00,\n          \nPercentile99\n:0.00,\n          \nPercentile999\n:0.00,\n          \nSampleSize\n:0\n        },\n      \nSampleModule.TestRequestSize\n:{\n          \nCount\n:0,\n          \nLastValue\n:0.00,\n          \nMin\n:0.00,\n          \nMean\n:0.00,\n          \nMax\n:0.00,\n          \nStdDev\n:0.00,\n          \nMedian\n:0.00,\n          \nPercentile75\n:0.00,\n          \nPercentile95\n:0.00,\n          \nPercentile98\n:0.00,\n          \nPercentile99\n:0.00,\n          \nPercentile999\n:0.00,\n          \nSampleSize\n:0\n        }\n    },\n  \nTimers\n:{\n      \nNancyFx.GET [/metrics/health]\n:{\n          \nRate\n:{\n              \nCount\n:36,\n              \nMeanRate\n:0.19,\n              \nOneMinuteRate\n:0.21,\n              \nFiveMinuteRate\n:0.20,\n              \nFifteenMinuteRate\n:0.20\n            },\n          \nHistogram\n:{\n              \nCount\n:36,\n              \nLastValue\n:425.69,\n              \nMin\n:330.85,\n              \nMean\n:382.34,\n              \nMax\n:435.18,\n              \nStdDev\n:26.54,\n              \nMedian\n:381.06,\n              \nPercentile75\n:403.76,\n              \nPercentile95\n:427.11,\n              \nPercentile98\n:435.18,\n              \nPercentile99\n:435.18,\n              \nPercentile999\n:435.18,\n              \nSampleSize\n:36\n            }\n        },\n      \nNancyFx.GET [/metrics/json]\n:{\n          \nRate\n:{\n              \nCount\n:732,\n              \nMeanRate\n:3.94,\n              \nOneMinuteRate\n:4.32,\n              \nFiveMinuteRate\n:2.44,\n              \nFifteenMinuteRate\n:1.56\n            },\n          \nHistogram\n:{\n              \nCount\n:732,\n              \nLastValue\n:3.79,\n              \nMin\n:2.31,\n              \nMean\n:7.55,\n              \nMax\n:408.84,\n              \nStdDev\n:19.57,\n              \nMedian\n:3.31,\n              \nPercentile75\n:3.92,\n              \nPercentile95\n:39.78,\n              \nPercentile98\n:61.07,\n              \nPercentile99\n:71.70,\n              \nPercentile999\n:408.84,\n              \nSampleSize\n:732\n            }\n        },\n      \nNancyFx.GET [/metrics]\n:{\n          \nRate\n:{\n              \nCount\n:3,\n              \nMeanRate\n:0.02,\n              \nOneMinuteRate\n:0.02,\n              \nFiveMinuteRate\n:0.11,\n              \nFifteenMinuteRate\n:0.16\n            },\n          \nHistogram\n:{\n              \nCount\n:3,\n              \nLastValue\n:0.13,\n              \nMin\n:0.13,\n              \nMean\n:26.05,\n              \nMax\n:77.86,\n              \nStdDev\n:44.87,\n              \nMedian\n:0.16,\n              \nPercentile75\n:77.86,\n              \nPercentile95\n:77.86,\n              \nPercentile98\n:77.86,\n              \nPercentile99\n:77.86,\n              \nPercentile999\n:77.86,\n              \nSampleSize\n:3\n            }\n        },\n      \nNancyFx.Requests\n:{\n          \nRate\n:{\n              \nCount\n:771,\n              \nMeanRate\n:4.03,\n              \nOneMinuteRate\n:4.56,\n              \nFiveMinuteRate\n:2.11,\n              \nFifteenMinuteRate\n:0.95\n            },\n          \nHistogram\n:{\n              \nCount\n:771,\n              \nLastValue\n:3.78,\n              \nMin\n:0.11,\n              \nMean\n:25.10,\n              \nMax\n:435.15,\n              \nStdDev\n:81.60,\n              \nMedian\n:3.33,\n              \nPercentile75\n:4.15,\n              \nPercentile95\n:79.62,\n              \nPercentile98\n:388.93,\n              \nPercentile99\n:408.69,\n              \nPercentile999\n:435.15,\n              \nSampleSize\n:771\n            }\n        },\n      \nSampleMetrics.Requests\n:{\n          \nRate\n:{\n              \nCount\n:723,\n              \nMeanRate\n:3.78,\n              \nOneMinuteRate\n:3.83,\n              \nFiveMinuteRate\n:4.64,\n              \nFifteenMinuteRate\n:5.09\n            },\n          \nHistogram\n:{\n              \nCount\n:723,\n              \nLastValue\n:472.59,\n              \nMin\n:10.99,\n              \nMean\n:1393.96,\n              \nMax\n:2998.03,\n              \nStdDev\n:875.90,\n              \nMedian\n:1282.13,\n              \nPercentile75\n:2145.02,\n              \nPercentile95\n:2892.10,\n              \nPercentile98\n:2949.10,\n              \nPercentile99\n:2994.81,\n              \nPercentile999\n:2998.03,\n              \nSampleSize\n:217\n            }\n        },\n      \nSampleModule.TestRequest.Time\n:{\n          \nRate\n:{\n              \nCount\n:0,\n              \nMeanRate\n:0.00,\n              \nOneMinuteRate\n:0.00,\n              \nFiveMinuteRate\n:0.00,\n              \nFifteenMinuteRate\n:0.00\n            },\n          \nHistogram\n:{\n              \nCount\n:0,\n              \nLastValue\n:0.00,\n              \nMin\n:0.00,\n              \nMean\n:0.00,\n              \nMax\n:0.00,\n              \nStdDev\n:0.00,\n              \nMedian\n:0.00,\n              \nPercentile75\n:0.00,\n              \nPercentile95\n:0.00,\n              \nPercentile98\n:0.00,\n              \nPercentile99\n:0.00,\n              \nPercentile999\n:0.00,\n              \nSampleSize\n:0\n            }\n        }\n    },\n  \nUnits\n:{\n      \nGauges\n:{\n          \n.NET Mb in all Heaps\n:\nMb\n,\n          \n.NET Time in GC\n:\n%\n,\n          \nContention Rate / Sec\n:\nAttempts/s\n,\n          \nExceptions Thrown / Sec\n:\nExceptions/s\n,\n          \nLogical Threads\n:\nThreads\n,\n          \nMb in all Heaps\n:\nMb\n,\n          \nPhysical Threads\n:\nThreads\n,\n          \nQueue Length / sec\n:\nThreads/s\n,\n          \nSampleMetrics.DataValue\n:\n$\n,\n          \nSystem AvailableRAM\n:\nMb\n,\n          \nSystem CPU Usage\n:\n%\n,\n          \nSystem Disk Reads/sec\n:\nkb/s\n,\n          \nSystem Disk Writes/sec\n:\nkb/s\n,\n          \nTime in GC\n:\n%\n,\n          \nTotal Exceptions\n:\nExceptions\n\n        },\n      \nCounters\n:{\n          \nNancyFx.ActiveRequests\n:\nActiveRequests\n,\n          \nSampleMetrics.ConcurrentRequests\n:\nRequests\n,\n          \nSampleMetrics.Requests\n:\nRequests\n\n        },\n      \nMeters\n:{\n          \nNancyFx.Errors\n:\nErrors/s\n,\n          \nSampleMetrics.Requests\n:\nRequests/s\n\n        },\n      \nHistograms\n:{\n          \nNancyFx.PostAndPutRequestsSize\n:\nbytes\n,\n          \nSampleMetrics.ResultsExample\n:\nItems\n,\n          \nSampleModule.TestRequest.Size\n:\nbytes\n,\n          \nSampleModule.TestRequestSize\n:\nbytes\n\n        },\n      \nTimers\n:{\n          \nNancyFx.GET [/metrics/health]\n:{\n              \nRate\n:\nRequests/s\n,\n              \nDuration\n:\nms\n\n            },\n          \nNancyFx.GET [/metrics/json]\n:{\n              \nRate\n:\nRequests/s\n,\n              \nDuration\n:\nms\n\n            },\n          \nNancyFx.GET [/metrics]\n:{\n              \nRate\n:\nRequests/s\n,\n              \nDuration\n:\nms\n\n            },\n          \nNancyFx.Requests\n:{\n              \nRate\n:\nRequests/s\n,\n              \nDuration\n:\nms\n\n            },\n          \nSampleMetrics.Requests\n:{\n              \nRate\n:\nRequests/s\n,\n              \nDuration\n:\nms\n\n            },\n          \nSampleModule.TestRequest.Time\n:{\n              \nRate\n:\nRequests/s\n,\n              \nDuration\n:\nms\n\n            }\n        }\n    }\n}", 
            "title": "v2.0-refactor"
        }, 
        {
            "location": "/advanced/v2-refactor/#refactor-notes-logary-notes-impl-metrics", 
            "text": "Moving towards a dashboard with full metrics, health check and log line support.", 
            "title": "Refactor notes: Logary notes impl metrics"
        }, 
        {
            "location": "/advanced/v2-refactor/#step-one-primitives", 
            "text": "Creating the infrastructure to hoise  PerformanceCounter  and  /proc  polling\nand continuous running on SQL statements into a probe.   Make  metric  an actor interface like  probe  Make probe similar to  metric  at first  Create a scheduling actor that can run  sample  on the probes and metrics  A console text-writer target for the above sample", 
            "title": "Step one - primitives"
        }, 
        {
            "location": "/advanced/v2-refactor/#outstanding-questions", 
            "text": "Handling of histograms as opposed to simple reservoirs of data?", 
            "title": "Outstanding Questions"
        }, 
        {
            "location": "/advanced/v2-refactor/#step-two-logary-integration", 
            "text": "Tying metrics, probes, health checks together with targets (reporters) and the registry (+ scheduler).   Register and unregister sampled metric in  Registry  Register and unregister sampled probe in  Registry  Register and unregister sampled health check in  Registry  All three above are  never   sampled  unless:  Use a  Rule  to connect a metric to a target, by specifying what  data point  to use as a gauge. This just calls  get_value  on a metric above.", 
            "title": "Step two - logary integration"
        }, 
        {
            "location": "/advanced/v2-refactor/#step-three-creating-custom-probes", 
            "text": "When the infrastructure is in place, we can create probes that solve common problems.   Proof of concept probe that uses G\u00f6ran's SQL for SQL Server to continuously report metrics.", 
            "title": "Step three - creating custom probes"
        }, 
        {
            "location": "/advanced/v2-refactor/#step-four-documenting-the-above", 
            "text": "Document  how metrics, probes and health checks work and how they differ  Document order of initialisation  Document how to create custom (metric|probe|health check)  Document CLR perf counters, finish writing most common counters", 
            "title": "Step four - documenting the above"
        }, 
        {
            "location": "/advanced/v2-refactor/#step-five-health-checks-probes", 
            "text": "Create health check samples  Create probe samples and handling failing external subsystems?", 
            "title": "Step five - Health Checks, Probes"
        }, 
        {
            "location": "/advanced/v2-refactor/#step-six-integrate-new-f-actors", 
            "text": "Colin doing work to freeze API", 
            "title": "Step six - integrate new F# Actors?"
        }, 
        {
            "location": "/advanced/v2-refactor/#step-seven-using-a-dashboard", 
            "text": "The above is useless without a nice way to report the values. Create an in-app dashboard that can be used to access the histograms, guages and timers.  Let's just use the Apache 2.0 licensed  Metrics.Net  dashboard.  Extend with JsonDiffPatch  to avoid sending full state every time.  Instead of polling, open a Server-Sent Event socket and get all patches from there, continuously applying it to the in-memory rep.  Make sure we can report same data:  {\n   Timestamp : 2014-07-26T22:54:52.6894+02:00 ,\n   Gauges :{\n       .NET Mb in all Heaps :732.27,\n       .NET Time in GC :7.94,\n       Contention Rate / Sec :0.00,\n       Exceptions Thrown / Sec :0.00,\n       Logical Threads :28.00,\n       Mb in all Heaps :4.36,\n       Physical Threads :25.00,\n       Queue Length / sec :0.00,\n       SampleMetrics.DataValue :3628800.00,\n       System AvailableRAM :1245.00,\n       System CPU Usage :27.55,\n       System Disk Reads/sec :0.01,\n       System Disk Writes/sec :0.00,\n       Time in GC :0.06,\n       Total Exceptions :465.00\n    },\n   Counters :{\n       NancyFx.ActiveRequests :0,\n       SampleMetrics.ConcurrentRequests :7,\n       SampleMetrics.Requests :730\n    },\n   Meters :{\n       NancyFx.Errors :{\n           Count :0,\n           MeanRate :0.00,\n           OneMinuteRate :0.00,\n           FiveMinuteRate :0.00,\n           FifteenMinuteRate :0.00\n        },\n       SampleMetrics.Requests :{\n           Count :730,\n           MeanRate :3.82,\n           OneMinuteRate :3.93,\n           FiveMinuteRate :4.98,\n           FifteenMinuteRate :5.59\n        }\n    },\n   Histograms :{\n       NancyFx.PostAndPutRequestsSize :{\n           Count :0,\n           LastValue :0.00,\n           Min :0.00,\n           Mean :0.00,\n           Max :0.00,\n           StdDev :0.00,\n           Median :0.00,\n           Percentile75 :0.00,\n           Percentile95 :0.00,\n           Percentile98 :0.00,\n           Percentile99 :0.00,\n           Percentile999 :0.00,\n           SampleSize :0\n        },\n       SampleMetrics.ResultsExample :{\n           Count :730,\n           LastValue :3471.00,\n           Min :-4942.00,\n           Mean :105.35,\n           Max :4995.00,\n           StdDev :2866.55,\n           Median :213.00,\n           Percentile75 :2576.00,\n           Percentile95 :4530.00,\n           Percentile98 :4934.00,\n           Percentile99 :4939.00,\n           Percentile999 :4995.00,\n           SampleSize :730\n        },\n       SampleModule.TestRequest.Size :{\n           Count :0,\n           LastValue :0.00,\n           Min :0.00,\n           Mean :0.00,\n           Max :0.00,\n           StdDev :0.00,\n           Median :0.00,\n           Percentile75 :0.00,\n           Percentile95 :0.00,\n           Percentile98 :0.00,\n           Percentile99 :0.00,\n           Percentile999 :0.00,\n           SampleSize :0\n        },\n       SampleModule.TestRequestSize :{\n           Count :0,\n           LastValue :0.00,\n           Min :0.00,\n           Mean :0.00,\n           Max :0.00,\n           StdDev :0.00,\n           Median :0.00,\n           Percentile75 :0.00,\n           Percentile95 :0.00,\n           Percentile98 :0.00,\n           Percentile99 :0.00,\n           Percentile999 :0.00,\n           SampleSize :0\n        }\n    },\n   Timers :{\n       NancyFx.GET [/metrics/health] :{\n           Rate :{\n               Count :36,\n               MeanRate :0.19,\n               OneMinuteRate :0.21,\n               FiveMinuteRate :0.20,\n               FifteenMinuteRate :0.20\n            },\n           Histogram :{\n               Count :36,\n               LastValue :425.69,\n               Min :330.85,\n               Mean :382.34,\n               Max :435.18,\n               StdDev :26.54,\n               Median :381.06,\n               Percentile75 :403.76,\n               Percentile95 :427.11,\n               Percentile98 :435.18,\n               Percentile99 :435.18,\n               Percentile999 :435.18,\n               SampleSize :36\n            }\n        },\n       NancyFx.GET [/metrics/json] :{\n           Rate :{\n               Count :732,\n               MeanRate :3.94,\n               OneMinuteRate :4.32,\n               FiveMinuteRate :2.44,\n               FifteenMinuteRate :1.56\n            },\n           Histogram :{\n               Count :732,\n               LastValue :3.79,\n               Min :2.31,\n               Mean :7.55,\n               Max :408.84,\n               StdDev :19.57,\n               Median :3.31,\n               Percentile75 :3.92,\n               Percentile95 :39.78,\n               Percentile98 :61.07,\n               Percentile99 :71.70,\n               Percentile999 :408.84,\n               SampleSize :732\n            }\n        },\n       NancyFx.GET [/metrics] :{\n           Rate :{\n               Count :3,\n               MeanRate :0.02,\n               OneMinuteRate :0.02,\n               FiveMinuteRate :0.11,\n               FifteenMinuteRate :0.16\n            },\n           Histogram :{\n               Count :3,\n               LastValue :0.13,\n               Min :0.13,\n               Mean :26.05,\n               Max :77.86,\n               StdDev :44.87,\n               Median :0.16,\n               Percentile75 :77.86,\n               Percentile95 :77.86,\n               Percentile98 :77.86,\n               Percentile99 :77.86,\n               Percentile999 :77.86,\n               SampleSize :3\n            }\n        },\n       NancyFx.Requests :{\n           Rate :{\n               Count :771,\n               MeanRate :4.03,\n               OneMinuteRate :4.56,\n               FiveMinuteRate :2.11,\n               FifteenMinuteRate :0.95\n            },\n           Histogram :{\n               Count :771,\n               LastValue :3.78,\n               Min :0.11,\n               Mean :25.10,\n               Max :435.15,\n               StdDev :81.60,\n               Median :3.33,\n               Percentile75 :4.15,\n               Percentile95 :79.62,\n               Percentile98 :388.93,\n               Percentile99 :408.69,\n               Percentile999 :435.15,\n               SampleSize :771\n            }\n        },\n       SampleMetrics.Requests :{\n           Rate :{\n               Count :723,\n               MeanRate :3.78,\n               OneMinuteRate :3.83,\n               FiveMinuteRate :4.64,\n               FifteenMinuteRate :5.09\n            },\n           Histogram :{\n               Count :723,\n               LastValue :472.59,\n               Min :10.99,\n               Mean :1393.96,\n               Max :2998.03,\n               StdDev :875.90,\n               Median :1282.13,\n               Percentile75 :2145.02,\n               Percentile95 :2892.10,\n               Percentile98 :2949.10,\n               Percentile99 :2994.81,\n               Percentile999 :2998.03,\n               SampleSize :217\n            }\n        },\n       SampleModule.TestRequest.Time :{\n           Rate :{\n               Count :0,\n               MeanRate :0.00,\n               OneMinuteRate :0.00,\n               FiveMinuteRate :0.00,\n               FifteenMinuteRate :0.00\n            },\n           Histogram :{\n               Count :0,\n               LastValue :0.00,\n               Min :0.00,\n               Mean :0.00,\n               Max :0.00,\n               StdDev :0.00,\n               Median :0.00,\n               Percentile75 :0.00,\n               Percentile95 :0.00,\n               Percentile98 :0.00,\n               Percentile99 :0.00,\n               Percentile999 :0.00,\n               SampleSize :0\n            }\n        }\n    },\n   Units :{\n       Gauges :{\n           .NET Mb in all Heaps : Mb ,\n           .NET Time in GC : % ,\n           Contention Rate / Sec : Attempts/s ,\n           Exceptions Thrown / Sec : Exceptions/s ,\n           Logical Threads : Threads ,\n           Mb in all Heaps : Mb ,\n           Physical Threads : Threads ,\n           Queue Length / sec : Threads/s ,\n           SampleMetrics.DataValue : $ ,\n           System AvailableRAM : Mb ,\n           System CPU Usage : % ,\n           System Disk Reads/sec : kb/s ,\n           System Disk Writes/sec : kb/s ,\n           Time in GC : % ,\n           Total Exceptions : Exceptions \n        },\n       Counters :{\n           NancyFx.ActiveRequests : ActiveRequests ,\n           SampleMetrics.ConcurrentRequests : Requests ,\n           SampleMetrics.Requests : Requests \n        },\n       Meters :{\n           NancyFx.Errors : Errors/s ,\n           SampleMetrics.Requests : Requests/s \n        },\n       Histograms :{\n           NancyFx.PostAndPutRequestsSize : bytes ,\n           SampleMetrics.ResultsExample : Items ,\n           SampleModule.TestRequest.Size : bytes ,\n           SampleModule.TestRequestSize : bytes \n        },\n       Timers :{\n           NancyFx.GET [/metrics/health] :{\n               Rate : Requests/s ,\n               Duration : ms \n            },\n           NancyFx.GET [/metrics/json] :{\n               Rate : Requests/s ,\n               Duration : ms \n            },\n           NancyFx.GET [/metrics] :{\n               Rate : Requests/s ,\n               Duration : ms \n            },\n           NancyFx.Requests :{\n               Rate : Requests/s ,\n               Duration : ms \n            },\n           SampleMetrics.Requests :{\n               Rate : Requests/s ,\n               Duration : ms \n            },\n           SampleModule.TestRequest.Time :{\n               Rate : Requests/s ,\n               Duration : ms \n            }\n        }\n    }\n}", 
            "title": "Step seven - using a dashboard"
        }, 
        {
            "location": "/advanced/reservoirs/", 
            "text": "Rura animosa agnovit perque et nondum quoque\n\n\nHac si dextro\n\n\nLorem \nmarkdownum\n, bracchia habitu maculosae in opus ait, id certam tardo,\nquae hanc! Est mersis \ncongeriem\n lintea oppugnant glaciali crus, nondum saevi.\n\n\nAlebat nec et transit est cautus levi\n\n\nSumma \nvestes\n vocis. Media et amictae urbe vocantem et dixit, meae simul\nreverentia iactanti poscere. Et illas ambagibus gravem Polydorus te caudam\nbicolor pars precor?\n\n\n\n\nIn in sic insons moratur\n\n\nPer ingratus hanc reflectitur hosti\n\n\nToris exstinctos cultusque erat\n\n\nNonaque vocem nequiquam Aventino signum plangore deduxit\n\n\nPatruo si ipse dulce thalamoque inpius pone\n\n\n\n\nFontes erat\n\n\nAlcyone cum sentit ministrae vestibus palude, quas decimum nihil. Audiat nomine,\nille quae ter tenebat tumulo! Se plura exsangue lupum: dum feci, notatas postes,\ncrescitque. Equorum magnanimi obliquis adflabat, fixa obrutaque dumque plagis,\nhoc nunc circumque adactus; Sunt validum.\n\n\nif (1 / vramCross.click_aix_cpl.ict_ram(-3, clockClusterUnit) \n\n        gnutellaGigoBar.vpn(qbeHard + 903179, css + google, software)) {\n    errorComputer.file_character(correction_tape);\n    cc_cyberspace.dongleMarkup = design;\n}\nbus.mbr(cdnMemory * compactDlcSoft, fileComputer.telecommunications_soa(-1,\n        camera));\nmnemonicDuplexBar.mamp_hard.middleware(file, copyResponsiveChipset);\n\n\n\nSolo ponit vicisse\n\n\nIntra paulum, ille habitat nam: atque super flammas contraque sceptroque aera\nfortisque parte. Similem Cycladas lateri riguerunt postquam tanto idque\nfluctibus hostis vento confusa. Et ego pennaeque adversi. Ceyx cum lacertis\n\naegra\n; amem Tigris simul, nec lumina\niuvencae, sine cum, dulces illic.\n\n\nDensus potest et Minervae exstabat credis et quaerunt mihi praesentior umeri. Tu\nvirga et numen! Videt videndi currus; neque ferre non mixtae quid caelo coegit,\nsurrexit hoc, nam. Esse non te Penelopaeque omnes illo victus.\n\n\nAb obliqua caelum agmenque mortalia errorem arreptamque tamen fuisses messes: et\ntum circumdata. In quoniam praecordia iacet; arbor cum natasque tanti.", 
            "title": "Reservoirs"
        }, 
        {
            "location": "/advanced/reservoirs/#rura-animosa-agnovit-perque-et-nondum-quoque", 
            "text": "", 
            "title": "Rura animosa agnovit perque et nondum quoque"
        }, 
        {
            "location": "/advanced/reservoirs/#hac-si-dextro", 
            "text": "Lorem  markdownum , bracchia habitu maculosae in opus ait, id certam tardo,\nquae hanc! Est mersis  congeriem  lintea oppugnant glaciali crus, nondum saevi.", 
            "title": "Hac si dextro"
        }, 
        {
            "location": "/advanced/reservoirs/#alebat-nec-et-transit-est-cautus-levi", 
            "text": "Summa  vestes  vocis. Media et amictae urbe vocantem et dixit, meae simul\nreverentia iactanti poscere. Et illas ambagibus gravem Polydorus te caudam\nbicolor pars precor?   In in sic insons moratur  Per ingratus hanc reflectitur hosti  Toris exstinctos cultusque erat  Nonaque vocem nequiquam Aventino signum plangore deduxit  Patruo si ipse dulce thalamoque inpius pone", 
            "title": "Alebat nec et transit est cautus levi"
        }, 
        {
            "location": "/advanced/reservoirs/#fontes-erat", 
            "text": "Alcyone cum sentit ministrae vestibus palude, quas decimum nihil. Audiat nomine,\nille quae ter tenebat tumulo! Se plura exsangue lupum: dum feci, notatas postes,\ncrescitque. Equorum magnanimi obliquis adflabat, fixa obrutaque dumque plagis,\nhoc nunc circumque adactus; Sunt validum.  if (1 / vramCross.click_aix_cpl.ict_ram(-3, clockClusterUnit)  \n        gnutellaGigoBar.vpn(qbeHard + 903179, css + google, software)) {\n    errorComputer.file_character(correction_tape);\n    cc_cyberspace.dongleMarkup = design;\n}\nbus.mbr(cdnMemory * compactDlcSoft, fileComputer.telecommunications_soa(-1,\n        camera));\nmnemonicDuplexBar.mamp_hard.middleware(file, copyResponsiveChipset);", 
            "title": "Fontes erat"
        }, 
        {
            "location": "/advanced/reservoirs/#solo-ponit-vicisse", 
            "text": "Intra paulum, ille habitat nam: atque super flammas contraque sceptroque aera\nfortisque parte. Similem Cycladas lateri riguerunt postquam tanto idque\nfluctibus hostis vento confusa. Et ego pennaeque adversi. Ceyx cum lacertis aegra ; amem Tigris simul, nec lumina\niuvencae, sine cum, dulces illic.  Densus potest et Minervae exstabat credis et quaerunt mihi praesentior umeri. Tu\nvirga et numen! Videt videndi currus; neque ferre non mixtae quid caelo coegit,\nsurrexit hoc, nam. Esse non te Penelopaeque omnes illo victus.  Ab obliqua caelum agmenque mortalia errorem arreptamque tamen fuisses messes: et\ntum circumdata. In quoniam praecordia iacet; arbor cum natasque tanti.", 
            "title": "Solo ponit vicisse"
        }, 
        {
            "location": "/advanced/writing-a-target/", 
            "text": "Numquam et polenta\n\n\nGens iussos illis arte tenuit\n\n\nLorem markdownum Lycaoniae vellem? Emisitque in adverti tellure furialibus; et\niacet enim dempta sinistra, in exitio \nconiuge\n Nec cuncta fiducia; iussi.\nOculos per tulit fortiter in quem sensisse saepe. Exemplo lugubris cornua\nanticipata voles, mea clamor aggere dixerat carpsere et placandam foedera\nLaomedonta, utrumque.\n\n\nif (pinterest_analyst_processor.cutDockStick(isdn, file, trashPanelComputer)\n        \n icio_macro_flops) {\n    ctr(sourceHard + power);\n    megapixelJava.recycle = aluSocial + page;\n}\nif (variable) {\n    association += device(nasBluWww, twitter + personalFriendlyDebugger,\n            transistor_acl_kilobit + operationKde);\n} else {\n    pretest_nas_end.numSwappable(core_directory, pretest + rgb_menu,\n            hexadecimal_web(41, romE, process));\n    joystickCmsPebibyte.crm = stateAdWebcam;\n    cybercrime(codecFile, spoolingExploit, 1 - 31);\n}\nvar class = smishingSli.pageBotnetFlood(networking_bar,\n        cmyk_freeware.smb_orientation_subdirectory(p + leopardDotWireless, c\n        * cpl, 2));\nbridge.session_bandwidth = 4;\nyottabyte(firmwareMultiBank, parameterApple - print_rpm_widget,\n        data_vector_systray.autoresponder(textRestorePhreaking,\n        cyberbullying_parallel, nic(gigoIrcMirrored, 1)));\n\n\n\nSex te erat dictis tantum\n\n\nPlacidum sedem, deprendere dabitur fulminibus tamquam dicta Hesperiosque \norbes\nmassa\n adiutus terret, admonitus in partes quam. Poterant virum remeasse magis\nveteres! Hic illa eosdem refluitque dabis caede demas adfata capitis narrare\nCorinthus nunc Cybeleius commisi tanti dabat, Hylonome.\n\n\nUt Seriphi \nquibus metuit\n; in Ixiona, ore scelus. Ergo ab\ninque Cyane palam neque nec tempora erat.\n\n\nSubductaque magni\n\n\nCara dedit, Phegeius communes in praebuit viscera inritata, medius, Palaemona,\nlatebris? \nNec bella\n vocisque Phrygiaeque\nspectat iusserat illa quietem tunc protinus effugies libens attolle quam visum.\nSua laetis expellitque omnes pugnaeque vomit. Nec certe olim natalis ego,\nflammam, tantum, est Tenos corpora uteri, quam currus, linguam illa!\n\n\n\n\nPetis ita in sola prius dimissis nocturnae\n\n\nIlle aequora animosque ultimus caesas qua et\n\n\nNomen est demersit capillis redimat omnem victorque\n\n\nCorpore eurytus et lenius\n\n\nAliis ad pectore bracchia tua pugnant fuerit\n\n\nSollicita dare\n\n\n\n\nBracchia miserande quo postquam haesit deusque quamvis advena ut ignorant\nquaerit. Horas in volat, baculumque nectareis ostendit dabat dant deducit\nquotiensque altis increscere bracchia, mutata subiectum.", 
            "title": "Writing a Target"
        }, 
        {
            "location": "/advanced/writing-a-target/#numquam-et-polenta", 
            "text": "", 
            "title": "Numquam et polenta"
        }, 
        {
            "location": "/advanced/writing-a-target/#gens-iussos-illis-arte-tenuit", 
            "text": "Lorem markdownum Lycaoniae vellem? Emisitque in adverti tellure furialibus; et\niacet enim dempta sinistra, in exitio  coniuge  Nec cuncta fiducia; iussi.\nOculos per tulit fortiter in quem sensisse saepe. Exemplo lugubris cornua\nanticipata voles, mea clamor aggere dixerat carpsere et placandam foedera\nLaomedonta, utrumque.  if (pinterest_analyst_processor.cutDockStick(isdn, file, trashPanelComputer)\n          icio_macro_flops) {\n    ctr(sourceHard + power);\n    megapixelJava.recycle = aluSocial + page;\n}\nif (variable) {\n    association += device(nasBluWww, twitter + personalFriendlyDebugger,\n            transistor_acl_kilobit + operationKde);\n} else {\n    pretest_nas_end.numSwappable(core_directory, pretest + rgb_menu,\n            hexadecimal_web(41, romE, process));\n    joystickCmsPebibyte.crm = stateAdWebcam;\n    cybercrime(codecFile, spoolingExploit, 1 - 31);\n}\nvar class = smishingSli.pageBotnetFlood(networking_bar,\n        cmyk_freeware.smb_orientation_subdirectory(p + leopardDotWireless, c\n        * cpl, 2));\nbridge.session_bandwidth = 4;\nyottabyte(firmwareMultiBank, parameterApple - print_rpm_widget,\n        data_vector_systray.autoresponder(textRestorePhreaking,\n        cyberbullying_parallel, nic(gigoIrcMirrored, 1)));", 
            "title": "Gens iussos illis arte tenuit"
        }, 
        {
            "location": "/advanced/writing-a-target/#sex-te-erat-dictis-tantum", 
            "text": "Placidum sedem, deprendere dabitur fulminibus tamquam dicta Hesperiosque  orbes\nmassa  adiutus terret, admonitus in partes quam. Poterant virum remeasse magis\nveteres! Hic illa eosdem refluitque dabis caede demas adfata capitis narrare\nCorinthus nunc Cybeleius commisi tanti dabat, Hylonome.  Ut Seriphi  quibus metuit ; in Ixiona, ore scelus. Ergo ab\ninque Cyane palam neque nec tempora erat.", 
            "title": "Sex te erat dictis tantum"
        }, 
        {
            "location": "/advanced/writing-a-target/#subductaque-magni", 
            "text": "Cara dedit, Phegeius communes in praebuit viscera inritata, medius, Palaemona,\nlatebris?  Nec bella  vocisque Phrygiaeque\nspectat iusserat illa quietem tunc protinus effugies libens attolle quam visum.\nSua laetis expellitque omnes pugnaeque vomit. Nec certe olim natalis ego,\nflammam, tantum, est Tenos corpora uteri, quam currus, linguam illa!   Petis ita in sola prius dimissis nocturnae  Ille aequora animosque ultimus caesas qua et  Nomen est demersit capillis redimat omnem victorque  Corpore eurytus et lenius  Aliis ad pectore bracchia tua pugnant fuerit  Sollicita dare   Bracchia miserande quo postquam haesit deusque quamvis advena ut ignorant\nquaerit. Horas in volat, baculumque nectareis ostendit dabat dant deducit\nquotiensque altis increscere bracchia, mutata subiectum.", 
            "title": "Subductaque magni"
        }, 
        {
            "location": "/advanced/writing-a-metric/", 
            "text": "Est vino vulnera commissus\n\n\nLudere fere\n\n\nLorem\n markdownum nisi speculo, non oculi nectar a et terra fruticumque telis;\nurbes \nnaufragus properare\n ab restare rupit. Nomen miserrimus haberent\ninvidiosa, timor quem contraria dubitanti fugit. Tollens me Curibus diducit\nmagni, nox nate pone ritu annis, omnia, manu vestem.\n\n\nAccessit onus\n\n\nSibi dum pariter est \npraecipuum nunc\n se, pater, veluti.\nBabylonius ciboque. \nAevi manus\n signans tendere nigrum resilire ruit\ninterceperit quantum filia, patet obsistere libido prohibent, crevit generis\nurimur? Templis qua gemina coniunx Saturnia has adspicit stratis tanta, nec\ntamen.\n\n\nPlerumque nec\n\n\nHoc quo aries eque mala pignoribus maeret annus. Nimium fama, que illa opus\nserpentis specus tamen sub cum tum per Messapiaque celsum adspicis lenimen. Sua\ncum sumpsisse alendi claudit. Potuit illa animas foedat quod claris, moratum\nmetu tollit \ngelidoque molimine pluribus\n pugnae potiunda sequitur partimque\nlaeta et relictus. Rerum perdere vires cacumine petitum lavet carpant modo\nintraverat obscura spectabat.\n\n\n\n\nRector semper habet illa est ad deductus\n\n\nIn posse ingreditur pariterque manibus imperat et\n\n\nSaevarum vindicta de boves dolore vota tactae\n\n\nQuid subito regi\n\n\nDiomede vobis ducitur Neptunus\n\n\n\n\nConsueta secundas in caro sed quo causa\n\n\nAlbi aure plausis an vicisti vocesque dare Latois; dixit utve fuit, aspicit,\nalter in. Adimam laetus usus remotis, potes ambo, Perrhaebum adest \nut ante\nrequiescit\n. Sua tamen secundi sit \nreduxit\nponunt\n misso da periclo te deorum. Orbe parentes; hosti\npostquam summam rustica Alcmene, Epiros aera, eripitur. Et \ncomminus et\n mensae\nlumina; amanti, deo iam unum oraque simus, per ne fetum.\n\n\nPoposcit formosior cernis\n\n\nHic Calaureae movere, emergit relinquet Ereboque loqui, inpius contraria\nScythicae flores operum cognoscendo arma, via. Dubitat pectore protectus\nconsonat pectora post. Auditis in nisi armis tamquam facie. Penthea vocis,\npraedam in causam, praetemptatque invictus ave famaque crescit: fletus quae.\n\n\n\n\nEst virgo virginis licet quod gradu ficti\n\n\nIllo adclivis scelus\n\n\nEst fluminaque formae templa\n\n\nVicisti mea nec arto cui silet sub\n\n\nOrbes alimentaque equorum metuunt\n\n\n\n\nObice tempore? Pereo nec \nnomen\n quoque sinistra me ficta ligno lacertos\nvariasque fraga? Illi \ndextra fecundum\ncallidus\n a mecum dedisse, tulit sedemque,\n\nmaxima vertice membris\n! Pararis lumina corporis postquam relicta \net traxit\nvitaque\n, urgetque. Nec tecum nocent patefecit\nincurvo et illa optabile: induat et foret.", 
            "title": "Writing a Metric"
        }, 
        {
            "location": "/advanced/writing-a-metric/#est-vino-vulnera-commissus", 
            "text": "", 
            "title": "Est vino vulnera commissus"
        }, 
        {
            "location": "/advanced/writing-a-metric/#ludere-fere", 
            "text": "Lorem  markdownum nisi speculo, non oculi nectar a et terra fruticumque telis;\nurbes  naufragus properare  ab restare rupit. Nomen miserrimus haberent\ninvidiosa, timor quem contraria dubitanti fugit. Tollens me Curibus diducit\nmagni, nox nate pone ritu annis, omnia, manu vestem.", 
            "title": "Ludere fere"
        }, 
        {
            "location": "/advanced/writing-a-metric/#accessit-onus", 
            "text": "Sibi dum pariter est  praecipuum nunc  se, pater, veluti.\nBabylonius ciboque.  Aevi manus  signans tendere nigrum resilire ruit\ninterceperit quantum filia, patet obsistere libido prohibent, crevit generis\nurimur? Templis qua gemina coniunx Saturnia has adspicit stratis tanta, nec\ntamen.", 
            "title": "Accessit onus"
        }, 
        {
            "location": "/advanced/writing-a-metric/#plerumque-nec", 
            "text": "Hoc quo aries eque mala pignoribus maeret annus. Nimium fama, que illa opus\nserpentis specus tamen sub cum tum per Messapiaque celsum adspicis lenimen. Sua\ncum sumpsisse alendi claudit. Potuit illa animas foedat quod claris, moratum\nmetu tollit  gelidoque molimine pluribus  pugnae potiunda sequitur partimque\nlaeta et relictus. Rerum perdere vires cacumine petitum lavet carpant modo\nintraverat obscura spectabat.   Rector semper habet illa est ad deductus  In posse ingreditur pariterque manibus imperat et  Saevarum vindicta de boves dolore vota tactae  Quid subito regi  Diomede vobis ducitur Neptunus", 
            "title": "Plerumque nec"
        }, 
        {
            "location": "/advanced/writing-a-metric/#consueta-secundas-in-caro-sed-quo-causa", 
            "text": "Albi aure plausis an vicisti vocesque dare Latois; dixit utve fuit, aspicit,\nalter in. Adimam laetus usus remotis, potes ambo, Perrhaebum adest  ut ante\nrequiescit . Sua tamen secundi sit  reduxit\nponunt  misso da periclo te deorum. Orbe parentes; hosti\npostquam summam rustica Alcmene, Epiros aera, eripitur. Et  comminus et  mensae\nlumina; amanti, deo iam unum oraque simus, per ne fetum.", 
            "title": "Consueta secundas in caro sed quo causa"
        }, 
        {
            "location": "/advanced/writing-a-metric/#poposcit-formosior-cernis", 
            "text": "Hic Calaureae movere, emergit relinquet Ereboque loqui, inpius contraria\nScythicae flores operum cognoscendo arma, via. Dubitat pectore protectus\nconsonat pectora post. Auditis in nisi armis tamquam facie. Penthea vocis,\npraedam in causam, praetemptatque invictus ave famaque crescit: fletus quae.   Est virgo virginis licet quod gradu ficti  Illo adclivis scelus  Est fluminaque formae templa  Vicisti mea nec arto cui silet sub  Orbes alimentaque equorum metuunt   Obice tempore? Pereo nec  nomen  quoque sinistra me ficta ligno lacertos\nvariasque fraga? Illi  dextra fecundum\ncallidus  a mecum dedisse, tulit sedemque, maxima vertice membris ! Pararis lumina corporis postquam relicta  et traxit\nvitaque , urgetque. Nec tecum nocent patefecit\nincurvo et illa optabile: induat et foret.", 
            "title": "Poposcit formosior cernis"
        }, 
        {
            "location": "/advanced/thinking-about-time/", 
            "text": "Et inde\n\n\nIn Midan\n\n\nLorem markdownum \nundis mittere\n usque praebet, bacis tenebras invecta \nconcita\nper conbibitur\n aurum cognita, alios? \nLugendae\nte\n pararet certe Erinys: fissa, in\n\ndigna omnemque\n ignibus dextrae fit deus nostri tuorum. Est autem virgo rebus\nundis proceres sed exposcere \nausim\n, et \nsed\n vetustis latitant altaria\nNaupliades subit. Cruorem ostendit per uterum hos da, iussit vero, luce \npullo\nlacrimavit\n fuerat zonam vinco memorata ratione cur. Iacet profundo.\n\n\n\n\nGenus ille qui obsequitur nuda\n\n\nProceres et dicta cantu turba velamina scopulo\n\n\nFrustra celebrant quod non videbat Threiciam ingentem\n\n\nDulce bella quid\n\n\n\n\nOblitis albentibus vias tenet, sit tabellae; sine foret Phoebe. Tulit nostro,\nfortis quid; sorores per aristas Iuno locus, legeret. Secretaque arsit quid, hic\npudore qui Iapygis temone gratissima quam: suamque. Iovi Phryges saucia rex\nadspicio, nimbi pruniceum purpureis quibus tempora cum magis armis, cum et\nexarsit quae numerumque.\n\n\nViolasse crinales nova nocens multae Hectora silvis\n\n\nThalamos iubebit pro putares Latinus! Arcus tum animos \neuntis\nPhoebo\n adspiciam iaces corripuit milibus.\nManus miser tinnitibus \nmagni\n nec removete mactati iactat,\nsic sum tamen in in Hectoris timuitque exhibuere comites este, circumspicit!\nNamque amorem? Non ad \nte\n dura amoris supplex in quo, invitae aut mora aliter\nPhineu caelestia e sprevit et quis est.\n\n\nvar property_bin_retina = yobibyte;\nalert += utf_bot(cpm_optic_gigo, 56) - webmail_analyst_ssl.waveform_media(\n        71, error_syn_middleware, white_pci(hashtag, dvdStartArchie));\naddress_document += wimaxHardApi - http + cyberbullying_monitor +\n        technologyRte;\n\n\n\nMe fumo est coeptis celare genetrice ac baculi insidiis fessam oracla percussit,\net dixit fixus. Vultus et corpore dextrae \ncur\n porrigitur petens cumque lenis\nnostrae, armis. Tanta nubila noxque sum statione dedit nigra vultu, munus, hunc\ncura in peto!\n\n\nAnimo in vetusto Leuconoe cum orant abstulit\n\n\nRelicto lucus tremit enim vitiato tuo terris Sidonius rura funeris, lenius\nmedulla ecquis? Manu nimium, et Phrygiae gladios Pace. Vera suum verba vestibus\nomnibus nomina. Coniuge regnat, ademit genu sonus, nec coeperunt \nadhuc\n,\nvelit.\n\n\nmatrixPiconet(navigationSpiderDual(\n        grep_hardware_honeypot.newline_link_install(desktopUddiDevice, 2)),\n        barcraft(prom_e, san_point) + megahertz, qbe_scraping_plain);\nio_favorites.designThyristor.tunneling_vista_nvram(vectorApple);\nif (exploitInterfaceDelete(1, ipx) - station_swappable(dvd_data_srgb,\n        speakers)) {\n    broadband = 88 + bootSdk.ssl(scroll_readme_peopleware,\n            tigerLifoMegahertz, 35);\n}\n\n\n\nAit parva gentis latus et per illa fui haerentes sub quidem lux; tum. Neve\ntriformis, causas solet. Non diem Argolicis tenet, illis vellem res ad durus\n\ndeditque\n Pentheus sustulit caruerunt concipit mando! Labefactus nisi gravi,\nest illis, tantummodo \nsecus gaudeat gelidis\n, arcum enim. Facere pars\npariterque \numbras nubibus\n venit vitam; age secundo.", 
            "title": "Thinking About Time"
        }, 
        {
            "location": "/advanced/thinking-about-time/#et-inde", 
            "text": "", 
            "title": "Et inde"
        }, 
        {
            "location": "/advanced/thinking-about-time/#in-midan", 
            "text": "Lorem markdownum  undis mittere  usque praebet, bacis tenebras invecta  concita\nper conbibitur  aurum cognita, alios?  Lugendae\nte  pararet certe Erinys: fissa, in digna omnemque  ignibus dextrae fit deus nostri tuorum. Est autem virgo rebus\nundis proceres sed exposcere  ausim , et  sed  vetustis latitant altaria\nNaupliades subit. Cruorem ostendit per uterum hos da, iussit vero, luce  pullo\nlacrimavit  fuerat zonam vinco memorata ratione cur. Iacet profundo.   Genus ille qui obsequitur nuda  Proceres et dicta cantu turba velamina scopulo  Frustra celebrant quod non videbat Threiciam ingentem  Dulce bella quid   Oblitis albentibus vias tenet, sit tabellae; sine foret Phoebe. Tulit nostro,\nfortis quid; sorores per aristas Iuno locus, legeret. Secretaque arsit quid, hic\npudore qui Iapygis temone gratissima quam: suamque. Iovi Phryges saucia rex\nadspicio, nimbi pruniceum purpureis quibus tempora cum magis armis, cum et\nexarsit quae numerumque.", 
            "title": "In Midan"
        }, 
        {
            "location": "/advanced/thinking-about-time/#violasse-crinales-nova-nocens-multae-hectora-silvis", 
            "text": "Thalamos iubebit pro putares Latinus! Arcus tum animos  euntis\nPhoebo  adspiciam iaces corripuit milibus.\nManus miser tinnitibus  magni  nec removete mactati iactat,\nsic sum tamen in in Hectoris timuitque exhibuere comites este, circumspicit!\nNamque amorem? Non ad  te  dura amoris supplex in quo, invitae aut mora aliter\nPhineu caelestia e sprevit et quis est.  var property_bin_retina = yobibyte;\nalert += utf_bot(cpm_optic_gigo, 56) - webmail_analyst_ssl.waveform_media(\n        71, error_syn_middleware, white_pci(hashtag, dvdStartArchie));\naddress_document += wimaxHardApi - http + cyberbullying_monitor +\n        technologyRte;  Me fumo est coeptis celare genetrice ac baculi insidiis fessam oracla percussit,\net dixit fixus. Vultus et corpore dextrae  cur  porrigitur petens cumque lenis\nnostrae, armis. Tanta nubila noxque sum statione dedit nigra vultu, munus, hunc\ncura in peto!", 
            "title": "Violasse crinales nova nocens multae Hectora silvis"
        }, 
        {
            "location": "/advanced/thinking-about-time/#animo-in-vetusto-leuconoe-cum-orant-abstulit", 
            "text": "Relicto lucus tremit enim vitiato tuo terris Sidonius rura funeris, lenius\nmedulla ecquis? Manu nimium, et Phrygiae gladios Pace. Vera suum verba vestibus\nomnibus nomina. Coniuge regnat, ademit genu sonus, nec coeperunt  adhuc ,\nvelit.  matrixPiconet(navigationSpiderDual(\n        grep_hardware_honeypot.newline_link_install(desktopUddiDevice, 2)),\n        barcraft(prom_e, san_point) + megahertz, qbe_scraping_plain);\nio_favorites.designThyristor.tunneling_vista_nvram(vectorApple);\nif (exploitInterfaceDelete(1, ipx) - station_swappable(dvd_data_srgb,\n        speakers)) {\n    broadband = 88 + bootSdk.ssl(scroll_readme_peopleware,\n            tigerLifoMegahertz, 35);\n}  Ait parva gentis latus et per illa fui haerentes sub quidem lux; tum. Neve\ntriformis, causas solet. Non diem Argolicis tenet, illis vellem res ad durus deditque  Pentheus sustulit caruerunt concipit mando! Labefactus nisi gravi,\nest illis, tantummodo  secus gaudeat gelidis , arcum enim. Facere pars\npariterque  umbras nubibus  venit vitam; age secundo.", 
            "title": "Animo in vetusto Leuconoe cum orant abstulit"
        }, 
        {
            "location": "/advanced/contributing/", 
            "text": "Contribution Guidelines\n\n\nCoding style: pascalCase, 2 space intent. Use feature branches, PR against\nmaster. Use immutable data structures and tail recursion.\n\n\nUse \nmodule Logary.MyModule\n or \nmodule Logary.SubNs.MyModule\n, not:\n\n\nnamespace Logary.SubNs\n\nmodule MyModule =\n  ...\n\n\n\n\nIf introducing a new type + corresponding module (see \nMeasure.fs\n for example):\n\n\nTwo-phase configuration; first create immutable configuration, then compile it.\nSecond step: create running instances of everything from the configuration. This\nensures that a logary instance is correct by construction.", 
            "title": "Contributing"
        }, 
        {
            "location": "/advanced/contributing/#contribution-guidelines", 
            "text": "Coding style: pascalCase, 2 space intent. Use feature branches, PR against\nmaster. Use immutable data structures and tail recursion.  Use  module Logary.MyModule  or  module Logary.SubNs.MyModule , not:  namespace Logary.SubNs\n\nmodule MyModule =\n  ...  If introducing a new type + corresponding module (see  Measure.fs  for example):  Two-phase configuration; first create immutable configuration, then compile it.\nSecond step: create running instances of everything from the configuration. This\nensures that a logary instance is correct by construction.", 
            "title": "Contribution Guidelines"
        }, 
        {
            "location": "/about/", 
            "text": "More on Logary\n\n\nThe first observation is that almost all metrics stem from individual events\nwhich have a path, value and unit. The path is what they are named and where the\nevent occurred. The value is often 'one', meaning that it's a singular event that\noccurred. Sometimes, more than one unit is the value, e.g. when a user 'ordered\ntwo books' - a single event but with a non-zero value. The unit can be things\nlike 'a unit of something' such as a 'request' or a 'click', or it can be a\nduration like 'it took 2ms to call the db and get a response' -- however, it can\nalso be observed that a duration is really two individual events of a unit\nvalue; 'created connection to db' and 'closed connection to db after reading',\nboth of which are instantaneous first-order events.\n\n\nSecondary-order events are therefore things that something else has analysed,\nsuch as the 'mean duration of sql statement execution' as read from a\n'resource', such as a service's database. It's a measure of interest to the\nservice that you are writing, as you depend on the database's performance to\nmake your service work. However, you don't have the first-order instant-events\nthat go into creating the second-order event that you observe, because those two\nevents are not being broadcast back to your service (sql statement execution\nstarted, sql statement execution ended) and possibly doing that would cause too\nmuch data to be sent. We'll get back to second-order events soon, but keep in\nmind that they are already processed first-order events that most often don't\noriginate from our own service.\n\n\nAn event is either a Measure or a LogLine. A Metric is a single or many\nprocessed measures, but a metric is also an event when the value of the metric\nis one.\n\n\nYour service depends on other services to work; they are 'attached resources'\n(12factor app). You have both required resources and optional resources.\nRequired resources you need to have your service running, but optional resources\nyou can live without by providing 'dumbed down' data as output to queries and\nrequests.\n\n\nYou can yourself be an attached resource of other (upstream) services, or in\nother words you can build 'servers' that service 'clients'.\n\n\nWhen you make a request a resource from your service you often expect to get a\nresponse back, or at the very least, an ACK that your request was successfully\nreceived and parsed. The logging of such interactions between services is called\ndistributed tracing.\n\n\nWhen you start sending a request you can produce an event with a corresponding\ntag, and when you receive the response in full (or in part if it's a streaming\nresponse) you produce another event. It's up to Logary to coalesce these two\nevents into a Span (see Dapper/ZipKin) and generate the expected request/span\nid.\n\n\nBy tracking these two events as a Span, we can get an idea about what\nCodaHaleMetrics talks about as a 'Timer'. In CodeHaleMetrics' vocabulary it is\nthe 'rate that a particular piece of code is called and the distribution of its\nduration'. In order to understand what that means, we have to introduce two more\nconcepts besides the Span and events that we have already discussed.\n\n\nThe Meter is a derived statistic from more than one Measure/event; the rate of\nevents over time, e.g. 'requests per second'. In Logary we have two options for\ndealing with Meters: either ship the raw Measures as data to Riemann or Graphite\nand let those single-purpose services/resources deal with the roll-up\ncalculation (monoidal in nature!), or alternatively do the calculation in\nprocess based off of a Reservoir, like CodaHaleMetrics does it. However, we\ndon't want to expose any 'object' or 'interface' that is a 'Meter' because it's\nnot a value that is given from user code (i.e. the code that you, dear reader,\nwrite as a part of using Logary). Instead, you can register actors in the\nRegistry that calculate the Meter function that gives you averages and\ntime-decaying moving averages.\n\n\nThe second concept we need to look at to understand Spans and how they can be\nused to track rates (Meters) and distributations; is Histograms. A histogram is\nalso a calculated value that measures the statistical distribution of values in\na stream of data. A Histogram function places values it observes into buckets\nwhile allocating those buckets on the fly; or in other words, it allows you to\nsee the distribution of Measures in a frequency diagram.\n\n\nSo to get back to the Span abstraction; with the two input events, with their\ncorresponding Instants (discrete points on the time line as seen by the\ncomputing node or CPU), lets us use the Meter and Histogram function to get more\ninsight into our code as it is executing.\n\n\nOn top of allowing this insight based on only their underlying events, the\ntagging that must happen in client-server software allows Logary to figure our\nenough to attach LogLines/Annotations to the span, as well as to create a\nSpanTree that gives insight into points of possible parallelism and contention\nin a distributed system. (again, see the Dapper paper and ZipKin from Twitter).\n\n\nAs you read in the previous paragraph, spans can have attached annotations; that\nin logary are simple LogLines. A log line is a way to move meta-data about a\ncontext to a location where a programmer can inspect that meta-data to\nunderstand how his/her program is behaving in production. It's also simply\ncalled logging. However, what Logary gives you is a the conjunction of the above\nconcepts in a single library. It allows you to use only a few concepts from your\nown code, but extract a wealth of data.\n\n\nTargets\n\n\nWhen building a modern distributes system you need to move the data off the\ncomputing nodes, or you will surely suffer the wrath of bad data locality,\nfilled up disks and angry operations people. Not to mention problems of data\ncorrelation and obtruse RDP/SSH-ing into production nodes, which all-in-all is well\nworth avoiding. Logary is here to help, and it has implemented a whole range of\ntargets to do exactly that.\n\n\nThe idea is that you should always be using the best tool for the job. For\nlogging you should be using Logstash - send Logstash your logs and forget about\nthem on the computing node.\n\n\nFor metrics you should be using Graphite - it allows you to use statistical\nfunctions on your data points, allows you to degrade the granularity of your\ndata points over time to save space while still getting the jest of the\nlong-term trends and finally allows you to browse the data/metrics in a nice GUI\n(even nicer if you put Grafana on top!).\n\n\nFor decisions and health of your services you should be using Riemann; it's a\ngreat Complex Event Processing (CEP) engine which allows you to do the similar\nstatistical calculations on your data as Graphite does, except that it also can\ntrigger events and send messages based on those calculations. That means that\nyou don't have to write custom code to read and understand the Graphite graphs,\nbut can implement that in sweet-Jesus-clojure on the Riemann side.\n\n\nFor example, if you have a continuous deployment pipeline set up, you may want\nto send events to Riemann any time you have an exception, let Riemann calculate\nthe exception rate as a baseline and then compare that baseline to the exception\nrate of a newly deployed version; rolling the deploy back if the exception rate\ngoes outside of, say, two standard deviations of the baseline.\n\n\nThat's three targets and counting. To help those of you who still want log\noutput on your dev machine (who doesn't?), there are also TextWriter targets for\ne.g. the console and debugger, so you can use Logary for development.\n\n\nTargets can react on the two things they are sent; either LogLines or Measures.\nHow a targets acts it up to it, and there are Rules that decide whether a target\nshould be sent a given LogLine or Measure, and those Rules are given to the\nconfiguration API at service startup, when you start Logary. Those rules are the\nonly performance-optimisation that Logary does (but boy, is that a great\noptimisation!).\n\n\nTargets are implemented as asynchronous F# actors and they are registered in the\nRegistry and watched over by the Supervisor actor that is spawed when Logary is\nspawned. They have a OneByOne supervision policy attached to themselves, so that\ne.g. a TCP socket exception will trigger an actor restart.\n\n\nIn general, the idea is that targets should be super-simple to implement; a full\nimplementation takes a senior developer about half an hour to write and comes\nready with a config API and the above supervision, out of the box. More time can\nthen be spent to test it or implement optimisations such as exception handling\n(actors are otherwise following the dogma; 'let it crash', so you don't\nnecessarily have to handle exceptions). Time is also then spent on furthering\nthe test suite coverage and writing a nice fluent API for C# (aka. FactoryApi).", 
            "title": "About"
        }, 
        {
            "location": "/about/#more-on-logary", 
            "text": "The first observation is that almost all metrics stem from individual events\nwhich have a path, value and unit. The path is what they are named and where the\nevent occurred. The value is often 'one', meaning that it's a singular event that\noccurred. Sometimes, more than one unit is the value, e.g. when a user 'ordered\ntwo books' - a single event but with a non-zero value. The unit can be things\nlike 'a unit of something' such as a 'request' or a 'click', or it can be a\nduration like 'it took 2ms to call the db and get a response' -- however, it can\nalso be observed that a duration is really two individual events of a unit\nvalue; 'created connection to db' and 'closed connection to db after reading',\nboth of which are instantaneous first-order events.  Secondary-order events are therefore things that something else has analysed,\nsuch as the 'mean duration of sql statement execution' as read from a\n'resource', such as a service's database. It's a measure of interest to the\nservice that you are writing, as you depend on the database's performance to\nmake your service work. However, you don't have the first-order instant-events\nthat go into creating the second-order event that you observe, because those two\nevents are not being broadcast back to your service (sql statement execution\nstarted, sql statement execution ended) and possibly doing that would cause too\nmuch data to be sent. We'll get back to second-order events soon, but keep in\nmind that they are already processed first-order events that most often don't\noriginate from our own service.  An event is either a Measure or a LogLine. A Metric is a single or many\nprocessed measures, but a metric is also an event when the value of the metric\nis one.  Your service depends on other services to work; they are 'attached resources'\n(12factor app). You have both required resources and optional resources.\nRequired resources you need to have your service running, but optional resources\nyou can live without by providing 'dumbed down' data as output to queries and\nrequests.  You can yourself be an attached resource of other (upstream) services, or in\nother words you can build 'servers' that service 'clients'.  When you make a request a resource from your service you often expect to get a\nresponse back, or at the very least, an ACK that your request was successfully\nreceived and parsed. The logging of such interactions between services is called\ndistributed tracing.  When you start sending a request you can produce an event with a corresponding\ntag, and when you receive the response in full (or in part if it's a streaming\nresponse) you produce another event. It's up to Logary to coalesce these two\nevents into a Span (see Dapper/ZipKin) and generate the expected request/span\nid.  By tracking these two events as a Span, we can get an idea about what\nCodaHaleMetrics talks about as a 'Timer'. In CodeHaleMetrics' vocabulary it is\nthe 'rate that a particular piece of code is called and the distribution of its\nduration'. In order to understand what that means, we have to introduce two more\nconcepts besides the Span and events that we have already discussed.  The Meter is a derived statistic from more than one Measure/event; the rate of\nevents over time, e.g. 'requests per second'. In Logary we have two options for\ndealing with Meters: either ship the raw Measures as data to Riemann or Graphite\nand let those single-purpose services/resources deal with the roll-up\ncalculation (monoidal in nature!), or alternatively do the calculation in\nprocess based off of a Reservoir, like CodaHaleMetrics does it. However, we\ndon't want to expose any 'object' or 'interface' that is a 'Meter' because it's\nnot a value that is given from user code (i.e. the code that you, dear reader,\nwrite as a part of using Logary). Instead, you can register actors in the\nRegistry that calculate the Meter function that gives you averages and\ntime-decaying moving averages.  The second concept we need to look at to understand Spans and how they can be\nused to track rates (Meters) and distributations; is Histograms. A histogram is\nalso a calculated value that measures the statistical distribution of values in\na stream of data. A Histogram function places values it observes into buckets\nwhile allocating those buckets on the fly; or in other words, it allows you to\nsee the distribution of Measures in a frequency diagram.  So to get back to the Span abstraction; with the two input events, with their\ncorresponding Instants (discrete points on the time line as seen by the\ncomputing node or CPU), lets us use the Meter and Histogram function to get more\ninsight into our code as it is executing.  On top of allowing this insight based on only their underlying events, the\ntagging that must happen in client-server software allows Logary to figure our\nenough to attach LogLines/Annotations to the span, as well as to create a\nSpanTree that gives insight into points of possible parallelism and contention\nin a distributed system. (again, see the Dapper paper and ZipKin from Twitter).  As you read in the previous paragraph, spans can have attached annotations; that\nin logary are simple LogLines. A log line is a way to move meta-data about a\ncontext to a location where a programmer can inspect that meta-data to\nunderstand how his/her program is behaving in production. It's also simply\ncalled logging. However, what Logary gives you is a the conjunction of the above\nconcepts in a single library. It allows you to use only a few concepts from your\nown code, but extract a wealth of data.", 
            "title": "More on Logary"
        }, 
        {
            "location": "/about/#targets", 
            "text": "When building a modern distributes system you need to move the data off the\ncomputing nodes, or you will surely suffer the wrath of bad data locality,\nfilled up disks and angry operations people. Not to mention problems of data\ncorrelation and obtruse RDP/SSH-ing into production nodes, which all-in-all is well\nworth avoiding. Logary is here to help, and it has implemented a whole range of\ntargets to do exactly that.  The idea is that you should always be using the best tool for the job. For\nlogging you should be using Logstash - send Logstash your logs and forget about\nthem on the computing node.  For metrics you should be using Graphite - it allows you to use statistical\nfunctions on your data points, allows you to degrade the granularity of your\ndata points over time to save space while still getting the jest of the\nlong-term trends and finally allows you to browse the data/metrics in a nice GUI\n(even nicer if you put Grafana on top!).  For decisions and health of your services you should be using Riemann; it's a\ngreat Complex Event Processing (CEP) engine which allows you to do the similar\nstatistical calculations on your data as Graphite does, except that it also can\ntrigger events and send messages based on those calculations. That means that\nyou don't have to write custom code to read and understand the Graphite graphs,\nbut can implement that in sweet-Jesus-clojure on the Riemann side.  For example, if you have a continuous deployment pipeline set up, you may want\nto send events to Riemann any time you have an exception, let Riemann calculate\nthe exception rate as a baseline and then compare that baseline to the exception\nrate of a newly deployed version; rolling the deploy back if the exception rate\ngoes outside of, say, two standard deviations of the baseline.  That's three targets and counting. To help those of you who still want log\noutput on your dev machine (who doesn't?), there are also TextWriter targets for\ne.g. the console and debugger, so you can use Logary for development.  Targets can react on the two things they are sent; either LogLines or Measures.\nHow a targets acts it up to it, and there are Rules that decide whether a target\nshould be sent a given LogLine or Measure, and those Rules are given to the\nconfiguration API at service startup, when you start Logary. Those rules are the\nonly performance-optimisation that Logary does (but boy, is that a great\noptimisation!).  Targets are implemented as asynchronous F# actors and they are registered in the\nRegistry and watched over by the Supervisor actor that is spawed when Logary is\nspawned. They have a OneByOne supervision policy attached to themselves, so that\ne.g. a TCP socket exception will trigger an actor restart.  In general, the idea is that targets should be super-simple to implement; a full\nimplementation takes a senior developer about half an hour to write and comes\nready with a config API and the above supervision, out of the box. More time can\nthen be spent to test it or implement optimisations such as exception handling\n(actors are otherwise following the dogma; 'let it crash', so you don't\nnecessarily have to handle exceptions). Time is also then spent on furthering\nthe test suite coverage and writing a nice fluent API for C# (aka. FactoryApi).", 
            "title": "Targets"
        }
    ]
}